<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Compute on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/categories/compute/</link>
        <description>Recent content in Compute on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Fri, 10 May 2024 01:00:00 +0000</lastBuildDate><atom:link href="https://huizhou92.com/categories/compute/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>11 Tips for Detecting and Responding to Intrusions on Linux</title>
        <link>https://huizhou92.com/p/11-tips-for-detecting-and-responding-to-intrusions-on-linux/</link>
        <pubDate>Fri, 10 May 2024 01:00:00 +0000</pubDate>
        
        <guid>https://huizhou92.com/p/11-tips-for-detecting-and-responding-to-intrusions-on-linux/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/db9ed8c90e3341c2adf625afbd5ea8b0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Generate By DELLA-3&#34;
	
	
&gt;Generate By DELLA-3&lt;/p&gt;
&lt;p&gt;With the increasing popularity of open-source products, a backend engineer must be able to clearly identify whether an abnormal machine has been compromised. Based on my personal work experience, I have compiled several common scenarios of machines being hacked for reference.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Background&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;: The following scenarios are observed on CentOS systems and are similar for other Linux distributions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-intruders-may-delete-machinelogs&#34;&gt;1. Intruders May Delete Machine Logs
&lt;/h3&gt;&lt;p&gt;Check if log information still exists or has been cleared using the following commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/eb6d7948e20ca2e5613deee40d505bf2.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;t5rdb&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-intruders-may-create-a-new-file-for-storing-usernames-and-passwords&#34;&gt;2. Intruders May Create a New File for Storing Usernames and Passwords
&lt;/h3&gt;&lt;p&gt;Check &lt;code&gt;/etc/passwd&lt;/code&gt; and &lt;code&gt;/etc/shadow&lt;/code&gt; files for any alterations using the following commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/57d96bc4dfd26646223553f567be86c9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;zutpn&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-intruders-may-modify-usernames-and-passwords&#34;&gt;3. Intruders May Modify Usernames and Passwords
&lt;/h3&gt;&lt;p&gt;Examine the contents of &lt;code&gt;/etc/passwd&lt;/code&gt; and &lt;code&gt;/etc/shadow&lt;/code&gt; files for any changes using the following commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/206a5a3babe2a2a64d0e1f4b47120320.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;4j407&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-check-recent-successful-and-last-unsuccessful-login-events-on-themachine&#34;&gt;4. Check Recent Successful and Last Unsuccessful Login Events on the Machine
&lt;/h3&gt;&lt;p&gt;Refer to the log “/var/log/lastlog” using the following commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/b512fa0d6737c035aa1780287177c6f7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;v9cf6&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-use-who-to-view-all-currently-logged-in-users-on-themachine&#34;&gt;5. Use &lt;code&gt;who&lt;/code&gt; to View All Currently Logged-in Users on the Machine
&lt;/h3&gt;&lt;p&gt;Refer to the log file “/var/run/utmp”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/6fcc7bd1b96fab1bb6d5dbd6c9a0459a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;bpi14&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-use-last-to-view-users-logged-in-since-machinecreation&#34;&gt;6. Use &lt;code&gt;last&lt;/code&gt; To view Users Logged in Since Machine Creation
&lt;/h3&gt;&lt;p&gt;Refer to the log file “/var/log/wtmp”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/d8a528e67c28f0004f066a9feb63c8ed.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;m1m69&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-use-ac-to-view-connection-time-in-hours-for-all-users-on-themachine&#34;&gt;7. Use &lt;code&gt;ac&lt;/code&gt; to View Connection Time (in Hours) for All Users on the Machine
&lt;/h3&gt;&lt;p&gt;Refer to the log file “/var/log/wtmp”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/e0f5f25546b30c12dec7cfc59dc30776.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;aa7k0&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-if-abnormal-traffic-isdetected&#34;&gt;8. If Abnormal Traffic is Detected
&lt;/h3&gt;&lt;p&gt;Use &lt;code&gt;tcpdump&lt;/code&gt; to capture network packets or &lt;code&gt;iperf&lt;/code&gt; to check traffic.&lt;/p&gt;
&lt;h3 id=&#34;9-review-the-varlogsecure-logfile&#34;&gt;9. Review the &lt;code&gt;/var/log/secure&lt;/code&gt; Log File
&lt;/h3&gt;&lt;p&gt;Attempt to identify information about intruders using the following commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/90f84dd4a382230d881ce8bd5ce8d073.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;bv4nh&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-identify-scripts-executed-by-abnormal-processes&#34;&gt;10. Identify Scripts Executed by Abnormal Processes
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;1. Use the &lt;code&gt;top&lt;/code&gt; command to view the PID of abnormal processes:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/6a68a473ba76f9f22683e650be207c17.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;4aiu7&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1. Search for the executable file of the process in the virtual file system directory:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/19288c7a155ac9235834ab971109166c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2f0vv&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-file-recovery-after-confirming-intrusion-and-deletion-of-important-files&#34;&gt;11. File Recovery After Confirming Intrusion and Deletion of Important Files
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;When a process opens a file, even if it’s deleted, it remains on the disk as long as the process keeps it open. To recover such files, use &lt;code&gt;lsof&lt;/code&gt; the &lt;code&gt;/proc&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Most &lt;code&gt;lsof&lt;/code&gt; information is stored in directories named after the process&amp;rsquo;s PID, such as &lt;code&gt;/proc/1234&lt;/code&gt;, containing information for PID 1234. Each process directory contains various files providing insight into the process&amp;rsquo;s memory space, file descriptor list, symbolic links to files on disk, and other system information. &lt;code&gt;lsof&lt;/code&gt; uses this and other kernel internal state information to generate its output.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using the information above, you can retrieve the data by examining &lt;code&gt;/proc/&amp;lt;PID&amp;gt;/fd/&amp;lt;descriptor&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, to recover &lt;code&gt;/var/log/secure&lt;/code&gt;, follow these steps:&lt;/p&gt;
&lt;p&gt;a. Check &lt;code&gt;/var/log/secure&lt;/code&gt;, confirming its absence:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/00558f66ae2e3ee693c28e6d3a6e6447.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;z02gs&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;b. Use &lt;code&gt;lsof&lt;/code&gt; to check if any process is currently accessing &lt;code&gt;/var/log/secure&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/b9730ac8afdb1f047558fd360adb1c6c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;mtose&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;c. From the information above, PID 1264 (rsyslogd) has opened the file with a file descriptor of 4. It’s marked as deleted. Therefore, you can check the corresponding information in &lt;code&gt;/proc/1264/fd/4&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/7cb26d0bb8b0ebe300d7bcf1a8204eb9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;6u6kh&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;d. You can recover the data by redirecting it to a file using I/O redirection:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/5c781e5701b7da6564de1599c479cb13.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;nsspr&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;e. Confirm the existence of &lt;code&gt;/var/log/secure&lt;/code&gt; it again. This method is particularly useful for many applications, especially log files and databases.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/05/529dd47d9993282b0fa10af537742b91.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;40eal&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The above is the method I summarized for dealing with Linux intrusion. It can generally handle most problems. If you encounter an unresolved issue, it is best to seek advice from a professional IT operations and maintenance engineer.&lt;/p&gt;
&lt;p&gt;I may not have written it completely correctly, so if you have different opinions, please leave a comment and let me know.&lt;/p&gt;</description>
        </item>
        <item>
        <title>The Magical Algorithms Written by Two Old Men, Dominating the World!</title>
        <link>https://huizhou92.com/p/the-magical-algorithms-written-by-two-old-men-dominating-the-world/</link>
        <pubDate>Thu, 25 Apr 2024 18:47:00 +0000</pubDate>
        
        <guid>https://huizhou92.com/p/the-magical-algorithms-written-by-two-old-men-dominating-the-world/</guid>
        <description>&lt;p&gt;As an ordinary person, when you browse the web, you may not realize that the web pages sent to you by the server are actually compressed.&lt;/p&gt;
&lt;p&gt;If you like a programmer, press F12 in the browser, you&amp;rsquo;ll find something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/3dc37c7d0ce9c1a32f87d44adbd5ef8e.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;It means: In order to save bandwidth and provide speed, I (the server) compressed the content using gzip, and you (the browser) need to decompress it to view it!&lt;/p&gt;
&lt;p&gt;In HTTP compression, besides gzip, there are also algorithms like compress, deflate, br, etc., which can be dazzling.&lt;/p&gt;
&lt;p&gt;However, all these compression algorithms have an ancestor: &lt;strong&gt;LZ algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;LZ comes from the names of two people: Abraham &lt;strong&gt;L&lt;/strong&gt;empel and Jacob &lt;strong&gt;Z&lt;/strong&gt;iv.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/f99c3cfdce323ee7f49a9fc7cbf2ffc9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Both of them passed away in 2023, living a long life, with Lempel living to be 86 years old and Ziv living to be 91 years old.&lt;/p&gt;
&lt;h1 id=&#34;origin&#34;&gt;&lt;strong&gt;Origin&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;Data compression can be divided into two types: lossy compression, such as MP3, JPEG, where some unimportant data is deleted during compression, and lossless compression, where binary bits magically disappear, making files significantly smaller, facilitating storage and transmission.&lt;/p&gt;
&lt;p&gt;In 1948, after Claude Shannon founded information theory, everyone has been working on one thing: how to find the optimal coding to compress a piece of information.&lt;/p&gt;
&lt;p&gt;Shannon and Fano were the first to propose the &lt;strong&gt;Shannon-Fano coding&lt;/strong&gt;.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/d34b40c3bd6dba146e405c6328ffe57a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184027&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;It constructs a binary tree from top to bottom by grouping symbols.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/5fa4f771858988a54a24f909877cec3a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425183959&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;However, this method is not the optimal solution and the encoding is not a prefix code, making it prone to ambiguity.&lt;/p&gt;
&lt;p&gt;Later, while teaching information theory at MIT, Fano challenged his students: either take the final exam or improve existing data compression algorithms.&lt;/p&gt;
&lt;p&gt;A graduate student named Huffman didn&amp;rsquo;t like exams, so he chose the latter path.&lt;/p&gt;
&lt;p&gt;Huffman didn&amp;rsquo;t know that even the famous Shannon struggled with this problem. He researched for several months, developed various methods, but none worked.&lt;/p&gt;
&lt;p&gt;Just as he was about to give up and throw his notes into the trash, a wonderful and elegant algorithm crossed his mind: build a binary tree from bottom to top based on the frequency of characters, which is the famous Huffman algorithm.&lt;/p&gt;
&lt;p&gt;Huffman&amp;rsquo;s algorithm is called &amp;ldquo;optimal coding&amp;rdquo; and achieves two goals:&lt;/p&gt;
&lt;p&gt;(1) No character encoding is a prefix of another character encoding.&lt;/p&gt;
&lt;p&gt;(2) The total length of the information encoding is minimized.&lt;/p&gt;
&lt;p&gt;Although the Huffman algorithm is excellent, it has a huge limitation: &lt;strong&gt;it requires obtaining the probability of each character appearing first&lt;/strong&gt;, and then compression encoding can be done, which is often impossible in many cases.&lt;/p&gt;
&lt;p&gt;In the 1970s, with the emergence of the Internet, this problem became more prominent.&lt;/p&gt;
&lt;p&gt;Is it possible to compress data while reading it?&lt;/p&gt;
&lt;h1 id=&#34;breakthrough&#34;&gt;&lt;strong&gt;Breakthrough&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;Ziv and Lempel from the Technion-Israel Institute of Technology jointly challenged this problem.&lt;/p&gt;
&lt;p&gt;The two were a good team, with Ziv being good at statistics and information theory, while Lempel excelled in Boolean algebra and computer science.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/1324380a2e44a3dac2eba5ee62ab490e.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184054&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In 1977, they both came to Bell Labs for academic sabbaticals.&lt;/p&gt;
&lt;p&gt;Academic sabbatical, also known as &amp;ldquo;intellectual leave,&amp;rdquo; gives you a long period of&lt;/p&gt;
&lt;p&gt;leave (like six months) after working for a few years, during which you can do whatever you want, and it&amp;rsquo;s paid.&lt;/p&gt;
&lt;p&gt;The sabbaticals of the big shots are interesting. For example, Ken Thompson, the inventor of Unix, returned to his alma mater, Berkeley, during his sabbatical and spread Unix there, inspiring Bill Joy and others to develop BSD.&lt;/p&gt;
&lt;p&gt;Ziv and Lempel were similar. They went to Bell Labs in the United States for academic sabbaticals and co-authored a paper during their &amp;ldquo;sabbatical&amp;rdquo;: &amp;ldquo;A Universal Algorithm for Sequential Data Compression,&amp;rdquo; proposing an algorithm based on a &amp;ldquo;sliding window,&amp;rdquo; which does not directly consider character frequencies but instead finds repeated data blocks (such as strings, byte sequences, etc.) and references the positions where these data blocks appeared previously.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/6e5efd3753463265af8a4e84c007e4ca.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184125&#34;
	
	
&gt;&lt;br&gt;
This algorithm is LZ77, which is applicable to any type of data, requires no preprocessing (statistical character appearance probabilities), and achieves extremely high compression ratios with just one pass.&lt;/p&gt;
&lt;p&gt;The following year, they continued their efforts and improved LZ77 to become LZ78, which could perfectly reconstruct data from compressed data and was more efficient than previous algorithms.&lt;/p&gt;
&lt;h1 id=&#34;chaos&#34;&gt;&lt;strong&gt;Chaos&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;An invaluable treasure like the LZ algorithm remained in the theoretical realm for several years without widespread use.&lt;/p&gt;
&lt;p&gt;It wasn&amp;rsquo;t until 1984, when Terry Welch of DEC created the &lt;strong&gt;LZW algorithm&lt;/strong&gt; based on LZ, which was used in Unix&amp;rsquo;s &lt;strong&gt;compress&lt;/strong&gt; program.&lt;/p&gt;
&lt;p&gt;With the widespread dissemination of Unix, the LZ algorithm began to enter the fast lane of rapid development.&lt;/p&gt;
&lt;p&gt;However, it also entered an era of chaotic competition.&lt;/p&gt;
&lt;p&gt;In 1985, Thom Henderson, while downloading files from BBS, found it tedious to download one by one, as dial-up internet was too slow. So he wrote a software called &lt;strong&gt;ARC&lt;/strong&gt;, which could compress multiple files into one, making it much more convenient.&lt;/p&gt;
&lt;p&gt;In 1986, Phillip Katz discovered ARC, liked it, but felt that the compression speed was too slow. So he rolled up his sleeves, rewrote the key compression and decompression parts in assembly language, and created &lt;strong&gt;PKARC&lt;/strong&gt;, which he started selling.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/da855761fb63597eb7de689e7a5db345.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184142&#34;
	
	
&gt;&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/5dea706890fb605ba66eebaae69a27ad.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184148&#34;
	
	
&gt;&lt;br&gt;
When Thom Henderson saw his business being snatched away, he sued Phillip Katz, and the reasons were sufficient: the comments and spelling errors in your PKARC are the same as my ARC, you&amp;rsquo;re plagiarizing! Also, while my ARC is open source, the protocol specifies that you can only view it, not modify it!&lt;/p&gt;
&lt;p&gt;In the end, ARC won the lawsuit, and Phillip Katz paid tens of thousands of dollars in damages.&lt;/p&gt;
&lt;p&gt;Genius Phillip Katz was naturally not satisfied. He studied the LZ77 algorithm and the Huffman algorithm, combined them, and created a new compression algorithm (&lt;strong&gt;deflate&lt;/strong&gt;) and a new file format (&lt;strong&gt;zip&lt;/strong&gt;), as well as the new software &lt;strong&gt;PKZIP&lt;/strong&gt;.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/9f2582c7f818ccae3a8c3944585fda8a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184157&#34;
	
	
&gt;&lt;br&gt;
PKZIP quickly outperformed ARC in both compression ratio and decompression speed, and quickly dominated the DOS era.&lt;/p&gt;
&lt;p&gt;Since the ZIP format was open, the open-source info-zip group also released the open-source, free &lt;strong&gt;unzip&lt;/strong&gt; and &lt;strong&gt;zip&lt;/strong&gt;, implementing the deflate algorithm.&lt;/p&gt;
&lt;p&gt;Later, Jean-loup Gailly and Mark Adler developed the famous &lt;strong&gt;gzip&lt;/strong&gt; (file format + utility) based on deflate, replacing compress on Unix.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/de55eace3bd613ed7147e1313877cc8b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184253&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;gzip is the HTTP compression format seen at the beginning of the article.&lt;/p&gt;
&lt;p&gt;In 1991, Nico Mak felt dissatisfied with the command line of PKZIP, so he developed a front-end for Windows 3.1 based on PKZIP (later replaced by the open-source info-zip), allowing people to compress files using a graphical interface. This is the famous WinZip.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/05c9824cdc3df564ea258ac5afdc3994.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184442&#34;
	
	
&gt;&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/04/155a024cec52f0c9b8e2c5bd10400acf.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240425184447&#34;
	
	
&gt;&lt;br&gt;
Despite WinZip&amp;rsquo;s success, it was still &amp;ldquo;parasitic&amp;rdquo; on the Windows platform.&lt;/p&gt;
&lt;p&gt;Users find that WinZip has an exquisite interface and is user-friendly. There is no need to remember those annoying parameters and compression can be completed with a few clicks of the mouse.&lt;br&gt;
WinZip quickly took over all PCs and became one of the most popular shareware programs in the 1990s.&lt;br&gt;
Windows intervened and simply integrated Zip functionality into the operating system, ending everything.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;From LZ77 to LZW, compress, Deflate, gzip&amp;hellip; Lossless compression algorithms have been continuously patched and gradually formed into a huge family. However, no matter how they change, their principles and ideas are not much different from the original LZ algorithm.&lt;/p&gt;
&lt;p&gt;These algorithms help us compress images, compress text, compress content transmitted over the Internet, and have become an indispensable part of our daily lives.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s no exaggeration to say that the LZ algorithm and its descendants have dominated the world.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Why The Design :Why is the CPU slow to access the hard disk?</title>
        <link>https://huizhou92.com/p/why-the-design-why-is-the-cpu-slow-to-access-the-hard-disk/</link>
        <pubDate>Mon, 19 Feb 2024 03:02:00 +0000</pubDate>
        
        <guid>https://huizhou92.com/p/why-the-design-why-is-the-cpu-slow-to-access-the-hard-disk/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*WaxXsYm3cXY_ZGVG&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Mechanical hard disk drives (HDD) and solid-state drives (SSD) are two of the most common types of hard drives. As external storage for computers, it takes a long time for the CPU to access the data stored on them. According to the table below, accessing 4KB of data randomly in an SSD takes 1,500 times longer than accessing main memory, while the seek time for a mechanical disk is 100,000 times longer than accessing main memory:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*uPqEtBpV77g_KjSICrt0OA.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;em&gt;Latency Numbers Every Programmer Should Know&lt;/em&gt; &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/jboner/2841832&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;em&gt;https://gist.github.com/jboner/2841832&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although the seek time for a disk is only 10 ms, it is already a very long time for the CPU. When we scale up the times mentioned above proportionally, we can intuitively feel the performance differences. For example, if accessing L1 cache takes 1 second for the CPU, accessing main memory would take 3 minutes, reading data randomly from an SSD would take 3.4 days, disk seek would take 2 months, and network transmission could take over a year.&lt;/p&gt;
&lt;p&gt;In computer architecture, hard disks are common input/output devices, and the operating system does not necessarily need a hard disk to start. It can start through a hard disk, a network device, or an external device. Therefore, a hard disk is not a necessary condition for computer operation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*yyPSe13T7fXKL3lI.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;strong&gt;Input/Output Devices&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As an external input/output device, compared to CPU cache and memory, the slow read and write speed of a hard disk is reasonable. However, the several thousand to several hundred thousand times difference in speed does make it difficult to imagine or accept. In this article, we will analyze why accessing a hard disk is very slow for the CPU:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The process of CPU accessing data from a hard disk is complex. It first reads the data from the disk into memory through I/O operations and then accesses the data stored in memory.&lt;/li&gt;
&lt;li&gt;Mechanical hard disks rely on mechanical structures to access the data in the disk, which requires moving the mechanical arm of the disk.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;io-operations&#34;&gt;I/O Operations
&lt;/h1&gt;&lt;p&gt;In order for the CPU to access data from the disk, it must first read the data from the disk into memory through I/O operations, and then access the data stored in memory. There are three common types of I/O operations in computers: Programmed I/O, Interrupt-driven I/O, and Direct Memory Access (DMA). We will introduce these operations one by one:&lt;/p&gt;
&lt;p&gt;The simplest form of performing I/O operations is using &lt;em&gt;Programmed I/O&lt;/em&gt;. When using Programmed I/O, the CPU is responsible for all the work. For example, if we want to output “Hello World” on the screen, the CPU will write a new character to the I/O device each time, and after writing, it will poll the device’s status and wait for it to complete its work before writing a new character. This method is simple but it occupies all the CPU resources, which can cause serious waste of computing resources in some complex systems.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Interrupt-driven I/O&lt;/em&gt; is a more efficient way to perform I/O operations. In Programmed I/O, the CPU actively retrieves the device’s status and waits for the device to become idle. However, if Interrupt-driven I/O is used, the device will actively initiate an interrupt when it is idle, pause the current process, and save the context. The operating system will then execute the interrupt handler for the I/O device:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there are no characters to be printed at the moment, the interrupt handler stops and resumes the paused process.&lt;/li&gt;
&lt;li&gt;If there are characters to be printed, the next character is copied to the device and the paused process is resumed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using Interrupt-driven I/O allows the CPU to handle other tasks when the device is busy, thus maximizing CPU utilization and avoiding wasting precious computing resources. Compared to Programmed I/O, Interrupt-driven I/O delegates some work to the I/O device, thereby improving resource utilization.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Direct Memory Access (DMA)&lt;/em&gt; uses a DMA controller to perform I/O operations. Interrupt-driven I/O requires triggering an operating system interrupt for each character, which consumes CPU time. When we use a DMA controller, the CPU reads all the data from the buffer into the DMA controller at once, and the DMA controller is responsible for writing the data to the I/O device character by character。 Although the DMA controller can free up the CPU and reduce the number of interrupts, its execution speed is much slower than the CPU. If the DMA controller cannot drive the I/O device quickly, the CPU may have to wait for the DMA controller to trigger an interrupt. In this case, Interrupt-driven I/O or even Programmed I/O can provide faster access speed.&lt;/p&gt;
&lt;p&gt;By default, we use a DMA controller to perform I/O tasks. However, Programmed I/O and Interrupt-driven I/O are also acceptable options. When the CPU frequently needs to wait for the DMA controller to perform I/O tasks, using Interrupt-driven I/O or even polling Programmed I/O can achieve higher throughput. However, regardless of the method used, I/O is a complex and time-consuming operation in the program.&lt;/p&gt;
&lt;h1 id=&#34;mechanical-harddisk&#34;&gt;Mechanical Hard Disk
&lt;/h1&gt;&lt;p&gt;A mechanical hard disk drive (HDD) is an electronic, non-volatile mechanical data storage device. It uses magnetic storage to store and retrieve data on the disk. During the process of reading and writing data, the disk head connected to the mechanical arm of the hard disk reads and writes bits on the surface of the disk &lt;a class=&#34;link&#34; href=&#34;https://draveness.me/whys-the-design-cpu-and-disk//#fn:4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because the disk has a complex mechanical structure, reading and writing data on the disk takes a lot of time. The read and write performance of databases also depends on the performance of the disk. If we randomly query a piece of data in a database using a mechanical hard disk, it may trigger random I/O on the disk. However, it requires a significant cost to read data from the disk into memory. Loading data from a regular disk (non-SSD) involves processes such as queueing, seeking, rotating, and transferring data, which takes about 10 ms.&lt;/p&gt;
&lt;p&gt;When estimating the query performance of a database, we can use the order of magnitude of 10 ms to estimate the time occupied by random I/O. It is worth mentioning that random I/O has a significant impact on the query performance of databases. On the other hand, reading data sequentially from a disk can achieve a speed of up to 40 MB/s, which is several orders of magnitude faster. Therefore, we should try to minimize the number of random I/O operations in order to improve performance.&lt;/p&gt;
&lt;p&gt;A solid-state drive (SSD) is a computer storage device that uses flash memory as persistent storage. Unlike mechanical hard disks, SSDs do not contain any mechanical structures. When we read or write data using an SSD, no mechanical structures are involved because everything is done by circuits. Therefore, the read and write speed of an SSD is much faster than that of an HDD.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*Yw0ydv7zAqHbVrXZ.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 5 — HDD and SSD Prices&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since their inception, the prices of both mechanical hard disks and SSDs have been continuously decreasing. Mechanical hard disks are the main external storage used in data centers today. Most general-purpose commercial servers use mechanical hard disks as their main external storage. However, because the read and write speed of SSDs is tens of times faster than that of mechanical hard disks, more and more servers, especially databases, use SSDs as their external storage. However, as an external storage device with mechanical structures, it is susceptible to external interference when subjected to vibration.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h1&gt;&lt;p&gt;Hard disks are external storage devices in computers that can store large amounts of data persistently. However, the CPU cannot directly access the data on the hard disk. When a computer starts, the operating system loads the necessary data from the disk into memory for CPU access. But if the data the CPU wants to access is not in memory, it takes several thousand to several hundred thousand times longer to read the data. This is mainly due to the following two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU needs to access data in external storage through I/O operations. The three methods of Programmed I/O, Interrupt-driven I/O, and DMA all incur additional overhead and consume a significant amount of CPU time.&lt;/li&gt;
&lt;li&gt;Mechanical hard disks access the data in the disk through mechanical structures. Each random I/O operation on the hard disk requires several processes such as queueing, seeking, rotating, and transferring data, which takes about 10 ms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As mentioned in the article, a hard disk is not a necessary hardware device for computer operation. A computer can load the necessary data for startup from any external storage device such as a disk or CD-ROM into memory and start normally. However, hard disks are currently the most common external storage devices. In the end, let’s look at some open-ended questions related to the topic. Interested readers can carefully consider the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is data written to a hard disk always persistently stored without loss?&lt;/li&gt;
&lt;li&gt;Why is the data in memory cleared after a power outage and restart?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have any questions about the content of the article or want to learn more about the reasons behind some design decisions in software engineering, you can leave a comment below the blog post. The author will reply to related questions in a timely manner and select suitable topics for future content based on them&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Aws ec2 switch to ipv6,Save $43 per year</title>
        <link>https://huizhou92.com/p/aws-ec2-switch-to-ipv6save-43-per-year/</link>
        <pubDate>Fri, 19 Jan 2024 20:27:55 +0000</pubDate>
        
        <guid>https://huizhou92.com/p/aws-ec2-switch-to-ipv6save-43-per-year/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*32WLSHGCAPKEBvI3&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;Photo by &lt;a class=&#34;link&#34; href=&#34;https://unsplash.com/@burntime?utm_source=medium&amp;amp;utm_medium=referral&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alex Kulikov&lt;/a&gt; on &lt;a class=&#34;link&#34; href=&#34;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IPv6 has been around for a long time, and I have dealt with many IPv6 tasks in my work. However, I never thought about switching my EC2 instance to IPv4. Yesterday, while going through my email trash, I came across a message stating that AWS will start charging for IPv4 addresses from February 1, 2024. This caught my attention, so I decided to switch my EC2 instance to IPv6 today. The process was a bit of a hassle. This article is not only applicable to EC2 instances but should also work for other Linux hosts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*SHE5MfrCO4t2ckNL.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;adding-an-ipv6-address-toec2&#34;&gt;Adding an IPv6 Address to EC2
&lt;/h1&gt;&lt;p&gt;Since my EC2 instance’s DNS resolution is handled by Cloudflare, I mainly referred to this blog post: &lt;a class=&#34;link&#34; href=&#34;https://blog.cloudflare.com/zh-cn/amazon-2bn-ipv4-tax-how-avoid-paying-zh-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Amazon’s $2bn IPv4 Tax — and How to Avoid Paying It&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And also, the official AWS documentation on &lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/vpc-migrate-ipv6.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Migrating Your VPC from IPv4 to IPv6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s worth noting that the demo in the “Migrating Your VPC from IPv4 to IPv6” documentation assumes that the VPC has both a public and a private subnet. If you, like me, only have a public subnet, you can skip that part.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*ESBOHJRAC3rtmcsk.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I must say, AWS documentation is well-written, and there’s a lot to learn from it.&lt;/p&gt;
&lt;p&gt;The result after completing the setup should look like this, with both IPv4 and IPv6 addresses. Make sure to add the same rules for IPv6 in the security group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*N95oY6RVuVkurxfn.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;application-support&#34;&gt;Application Support
&lt;/h1&gt;&lt;p&gt;On my EC2 instance, I only have Nginx and Docker running, and I usually log in via SSH. So, I need to add IPv6 support for Nginx and SSH.&lt;/p&gt;
&lt;h1 id=&#34;nginx&#34;&gt;Nginx
&lt;/h1&gt;&lt;p&gt;For your HTTP server block (the one listening on port 80), add the line &lt;code&gt;listen [::]:80;&lt;/code&gt;. This allows Nginx to listen to both IPv4 and IPv6 HTTP traffic. Your modified server block should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     listen 80&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     listen &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;::&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:80&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     server_name hexo.hxzhouh.com&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;301&lt;/span&gt; https://&lt;span class=&#34;nv&#34;&gt;$host$request_uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For each HTTPS server block (those listening on port 443), add &lt;code&gt;listen [::]:443 ssl;&lt;/code&gt; inside each block. This enables Nginx to listen for HTTPS traffic on IPv6. For example, for the first HTTPS server block, you need to make the following modification:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     listen &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; ssl&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     listen &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;::&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:443 ssl&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     server_name hexo.hxzhouh.com&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;c1&#34;&gt;# other configurations...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Make these modifications for each HTTPS server block. Then, test the Nginx configuration with &lt;code&gt;Nginx -t&lt;/code&gt;. If there are no issues, reload the Nginx configuration with &lt;code&gt;systemctl reload nginx&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sshd&#34;&gt;SSHD
&lt;/h3&gt;&lt;p&gt;In the &lt;code&gt;sshd_config&lt;/code&gt; file, uncomment the line &lt;code&gt;AddressFamily any&lt;/code&gt; (i.e., remove the preceding &lt;code&gt;#&lt;/code&gt;) to enable IPv6 listening for SSH and other applications.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vim /etc/ssh/sshd_config
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ​
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;#Port 22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; AddressFamily any
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; AddressFamily inet
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;#ListenAddress 0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;#ListenAddress ::&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then, restart SSHD with &lt;code&gt;sudo systemctl reload sshd&lt;/code&gt;. Use the &lt;code&gt;netstat -tupln&lt;/code&gt; command to check if SSH is successfully listening on IPv6. If you see the following output, it means SSH is listening on IPv6:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*x564Ur3tmy5qQIOt.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Now the application layer modifications are complete.&lt;/p&gt;
&lt;h1 id=&#34;dns-configuration&#34;&gt;DNS Configuration
&lt;/h1&gt;&lt;p&gt;Finally, in Cloudflare, modify the DNS settings by changing the previous IPv4 A records to AAAA records for IPv6.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*Qpu-dV3-6obShvN4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;test&#34;&gt;Test
&lt;/h1&gt;&lt;p&gt;Test everything to make sure it’s working fine, and then you can delete the IPv4 address to avoid being charged.&lt;/p&gt;
&lt;p&gt;Uppublished: Running instances cannot have their IPv4 addresses removed, but you can rebuild them using an AMI. It’s a bit of a hassle, but at least AWS won’t send me any more emails. ✌️&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://repost.aws/questions/QUVmpO9BWGSuGwQh5tXk3f5w/how-to-remove-ipv4-public-ip-address-from-ec2-instances-before-february-2024-ipv6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to remove IPv4 public IP address from EC2 instances before February 2024? (IPv6)&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
