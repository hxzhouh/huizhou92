<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Panic on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/tags/panic/</link>
        <description>Recent content in Panic on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Thu, 27 Jun 2024 15:45:59 +0800</lastBuildDate><atom:link href="https://huizhou92.com/tags/panic/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Decrypt Go: Three reasons for panic</title>
        <link>https://huizhou92.com/p/decrypt-go-three-reasons-for-panic/</link>
        <pubDate>Thu, 27 Jun 2024 15:45:59 +0800</pubDate>
        
        <guid>https://huizhou92.com/p/decrypt-go-three-reasons-for-panic/</guid>
        <description>&lt;img src="https://images.yixiao9206.cn/blog-images/2024/06/06b79c29b3273fa4c8fe8e96e0e0a603.png" alt="Featured image of post Decrypt Go: Three reasons for panic" /&gt;&lt;h2 id=&#34;why-is-panic-worth-thinking-about&#34;&gt;Why is panic worth thinking about?
&lt;/h2&gt;&lt;p&gt;When learning Go, many questions often arise. Sometimes, what seems to be understood is actually not. What exactly is panic? It seems obvious, but it can be difficult to explain. I&amp;rsquo;m going to use two articles to understand the concept of panic thoroughly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Posture: Understanding the origins of panic. It doesn&amp;rsquo;t just come out of nowhere. There are three main postures to consider.&lt;/li&gt;
&lt;li&gt;Principles: Fully comprehending the internal workings of panic and understanding its deeper principles.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;



&lt;ins class=&#34;adsbygoogle&#34;
   style=&#34;display:block&#34;
   data-ad-client=&#34;ca-pub-9000447749076746&#34;
   data-ad-slot=&#34;5063552270&#34;
   data-ad-format=&#34;auto&#34;
   data-full-width-responsive=&#34;true&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
   (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-three-postures-of-panic&#34;&gt;The Three Postures of Panic
&lt;/h2&gt;&lt;p&gt;When does panic occur? Let&amp;rsquo;s start with the &amp;ldquo;form.&amp;rdquo; From a developer&amp;rsquo;s perspective, panic can be categorized into active and passive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active posture&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developers actively call the &lt;code&gt;panic()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Passive posture&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The compiler triggers hidden code.&lt;/li&gt;
&lt;li&gt;The kernel sends a signal to the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hidden-code-by-the-compiler&#34;&gt;Hidden Code by the Compiler
&lt;/h3&gt;&lt;p&gt;Go is simple yet powerful, and the compiler plays a crucial role. It handles many tasks on behalf of programmers, such as logic supplementation and memory escape analysis. This includes the throwing of panics!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a classic example: dividing by zero in integer arithmetic triggers a panic. How does this happen?&lt;/p&gt;
&lt;p&gt;Consider the following minimal code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;divzero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This function has a risk of division by zero. When &lt;code&gt;b&lt;/code&gt; is equal to 0, the program triggers a panic and exits, as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@ubuntu:~/code/gopher/src/panic# ./test_zero panic: runtime error: integer divide by zero goroutine &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;running&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: main.zero&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x64, 0x0, 0x0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; /root/code/gopher/src/panic/test_zero.go:6 +0x52
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, the question is: How does the program trigger a panic?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code reveals all secrets.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Looking at the code, it seems simple—just one line: &lt;code&gt;c := a / b&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;Well, it&amp;rsquo;s actually &lt;strong&gt;assembly code&lt;/strong&gt;. The hidden logic added by the compiler is not visible in the source code.&lt;/p&gt;
&lt;p&gt;By using the dlv debugger to set a breakpoint in the &lt;code&gt;divzero&lt;/code&gt; function and executing &lt;code&gt;disassemble&lt;/code&gt;, we can uncover the secret. Here is a snippet of the assembly code with annotations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dlv&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; disassemble
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TEXT main.zero&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; /root/code/gopher/src/panic/test_zero.go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // Check &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; b is equal to &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3c1    4885c9          &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; rcx, rcx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // If it&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s not equal to 0, jump to 0x4aa3c8 and execute the instruction&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; otherwise, &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; execution
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3c4    &lt;span class=&#34;m&#34;&gt;7502&lt;/span&gt;            jnz 0x4aa3c8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // If execution reaches this point, it means b is 0, so jump to 0x4aa3ed, which is call &lt;span class=&#34;nv&#34;&gt;$runtime&lt;/span&gt;.panicdivide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;  test_zero.go:6  0x4aa3c6    eb25            jmp 0x4aa3ed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3c8    4883f9ff        cmp rcx, -0x1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3cc    &lt;span class=&#34;m&#34;&gt;7407&lt;/span&gt;            jz 0x4aa3d5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3ce    &lt;span class=&#34;m&#34;&gt;4899&lt;/span&gt;            cqo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3d0    48f7f9          idiv rcx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:7  0x4aa3ec    c3              ret
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // See the magical &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test_zero.go:6  0x4aa3ed    e8ee27f8ff      call &lt;span class=&#34;nv&#34;&gt;$runtime&lt;/span&gt;.panicdivide
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Do you see the hidden function?&lt;/p&gt;
&lt;p&gt;The compiler secretly adds an &lt;code&gt;if/else&lt;/code&gt; logic and even includes the code for &lt;code&gt;runtime.panicdivide&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;b&lt;/code&gt; is equal to 0, it jumps to the function &lt;code&gt;runtime.panicdivide&lt;/code&gt;.&lt;br&gt;
Take a look at the &lt;code&gt;panicdivide&lt;/code&gt; function. It&amp;rsquo;s a simplified wrapper:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// runtime/panic.go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;panicdivide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;panicCheck2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;integer divide by zero&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;divideError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As you can see, it calls the &lt;code&gt;panic()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This is how a panic is triggered when dividing by zero. It&amp;rsquo;s not something that magically appears out of nowhere; rather, it&amp;rsquo;s the additional logic added by the compiler to ensure that a panic is triggered when the divisor is 0.&lt;/p&gt;
&lt;h3 id=&#34;triggered-by-process-signal&#34;&gt;Triggered by Process Signal
&lt;/h3&gt;&lt;p&gt;The most typical example is illegal memory access, such as accessing a nil pointer, which triggers a panic. How does this happen?&lt;/p&gt;
&lt;p&gt;Consider this minimal example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nilptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;When calling &lt;code&gt;nilptr(nil)&lt;/code&gt;, it will cause the process to exit with an exception:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@ubuntu:~/code/gopher/src/panic# ./test_nil panic: runtime error: invalid memory address or nil pointer dereference &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;signal SIGSEGV: segmentation violation &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x1 &lt;span class=&#34;nv&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0 &lt;span class=&#34;nv&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x4aa3bc&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; goroutine &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;running&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: main.nilptr&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x0, 0x0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; /root/code/gopher/src/panic/test_nil.go:6 +0x1c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, the question is: How does this panic occur?&lt;/p&gt;
&lt;p&gt;When the Go process starts, it registers the default signal handler, &lt;code&gt;sigtramp&lt;/code&gt;. When the CPU encounters a 0 address, it triggers a page fault exception, indicating an illegal address. The kernel sends a &lt;code&gt;SIGSEGV&lt;/code&gt; signal to the process. When this signal is received, the &lt;code&gt;sigtramp&lt;/code&gt; function handles it, ultimately calling the &lt;code&gt;panic()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sigtramp &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;pure assembly code&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-&amp;gt; sigtrampgo &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;signal_unix.go&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		-&amp;gt; sighandler &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;signal_sighandler.go&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			-&amp;gt; preparePanic &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;signal_amd64x.go&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				-&amp;gt; sigpanic &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;signal_unix.go&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					-&amp;gt; panicmem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						-&amp;gt; panic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the &lt;code&gt;sigpanic&lt;/code&gt; function, the &lt;code&gt;panicmem&lt;/code&gt; function is called, which then calls the &lt;code&gt;panic()&lt;/code&gt; function. This leads to Go&amp;rsquo;s panic handling.&lt;/p&gt;
&lt;p&gt;Similar to &lt;code&gt;panicdivide&lt;/code&gt;, &lt;code&gt;panicmem&lt;/code&gt; is a minimal wrapper for &lt;code&gt;panic()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;panicmem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;panicCheck2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;invalid memory address or nil pointer dereference&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;memoryError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This method triggers the panic function by using a software interrupt via a signal. It allows the Go registered signal handler to be invoked, enabling panic handling at the language level.&lt;br&gt;
You may wonder when the logic for signal handling is registered.&lt;/p&gt;
&lt;p&gt;During process initialization, when creating M0 (thread), the system call &lt;code&gt;sigaction&lt;/code&gt; is used to register the signal handling function as &lt;code&gt;sigtramp&lt;/code&gt;. The call stack looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mstartm0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initsig&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal_unix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;113&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setsig&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os_linux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As a result, when a software interrupt is triggered, the Go signal handling function is called, allowing panic handling at the language level.&lt;/p&gt;
&lt;h3 id=&#34;active-panic-by-developers&#34;&gt;Active Panic by Developers
&lt;/h3&gt;&lt;p&gt;The third way is when developers actively call &lt;code&gt;panic&lt;/code&gt; themselves:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;panic test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is a simple function call—very straightforward.&lt;/p&gt;
&lt;h2 id=&#34;discussing-the-essence-of-panic&#34;&gt;Discussing the Essence of Panic
&lt;/h2&gt;&lt;p&gt;Now that we have explored the postures of panic, all three methods ultimately rely on the &lt;code&gt;panic()&lt;/code&gt; function. So, one thing is clear: panic is a language-level handling mechanism.&lt;/p&gt;
&lt;p&gt;By default, after a panic occurs, if Go doesn&amp;rsquo;t handle it in any specific way, the default behavior is to print the reason for the panic, print the stack trace, and exit the program.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s go back to the fundamental question: What exactly is panic?&lt;/p&gt;
&lt;p&gt;I won&amp;rsquo;t delve into the concept, but I&amp;rsquo;ll describe a few simple facts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;panic()&lt;/code&gt; function internally creates a crucial data structure called &lt;code&gt;_panic&lt;/code&gt; and associates it with the goroutine.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;panic()&lt;/code&gt; function executes the &lt;code&gt;_defer&lt;/code&gt; function chain and handles the state of &lt;code&gt;_panic&lt;/code&gt; accordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What does it mean to handle &lt;code&gt;_panic&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;It means looping through the &lt;code&gt;_defer&lt;/code&gt; function chain on the goroutine. If all the &lt;code&gt;_defer&lt;/code&gt; functions are executed and the state of &lt;code&gt;_panic&lt;/code&gt; hasn&amp;rsquo;t been recovered, there is no other option but to exit the process and print the stack trace.&lt;/p&gt;
&lt;p&gt;If a friend on the &lt;code&gt;_defer&lt;/code&gt; chain recovers the state of &lt;code&gt;_panic&lt;/code&gt;, marking it as recovered, the process ends there. The normal code execution continues after that, following the &lt;code&gt;deferreturn&lt;/code&gt; logic.&lt;/p&gt;
&lt;p&gt;So, what is panic?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s just a special function call. That&amp;rsquo;s all it is.&lt;/p&gt;
&lt;p&gt;How special is it? I will explore its deep principles in the next article. In the meantime, consider a few questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What exactly is panic? Is it a structure or a function?&lt;/li&gt;
&lt;li&gt;Why does panic cause a Go process to exit?&lt;/li&gt;
&lt;li&gt;Why does recover need to be placed within a defer to work?&lt;/li&gt;
&lt;li&gt;Why does the process still not recover even when recover is placed within a defer?&lt;/li&gt;
&lt;li&gt;Why is it possible to panic again after a panic? What are the consequences?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Panic can occur in three ways: it can be actively triggered by developers, assisted by the compiler&amp;rsquo;s logic, or triggered by a software interrupt signal.&lt;/li&gt;
&lt;li&gt;Regardless of the posture, all methods ultimately rely on the &lt;code&gt;panic()&lt;/code&gt; function. Panic is merely a language-level handling mechanism.&lt;/li&gt;
&lt;li&gt;By default, after a panic occurs, if not handled, the program prints the panic cause, the stack trace, and exits the process.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
