<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jwt on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/tags/jwt/</link>
        <description>Recent content in Jwt on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Thu, 17 Oct 2024 16:34:38 +0800</lastBuildDate><atom:link href="https://huizhou92.com/tags/jwt/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Using JOSE To Protect your APIs 1：JOSE Basics</title>
        <link>https://huizhou92.com/draft/understanding-cryptography-for-secure-api-development/</link>
        <pubDate>Thu, 17 Oct 2024 16:34:38 +0800</pubDate>
        
        <guid>https://huizhou92.com/draft/understanding-cryptography-for-secure-api-development/</guid>
        <description>&lt;p&gt;With the development of internet technology, data security has become a top priority. Data security covers a broad spectrum, including technical, service, storage, and transmission security. This article focuses on transmission security, specifically how to develop secure APIs.&lt;/p&gt;
&lt;p&gt;This article series will include several topics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Basic Knowledge&lt;/li&gt;
&lt;li&gt;Introduction to JOSE, JWT, and JWE&lt;/li&gt;
&lt;li&gt;Certificates&lt;/li&gt;
&lt;li&gt;How HTTPS Secures Web Applications&lt;/li&gt;
&lt;li&gt;OAuth 2.0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The primary content of this article reviews several encryption and verification algorithms, laying a foundation for later practical discussions. Let’s go！&lt;/p&gt;
&lt;h2 id=&#34;information-security-algorithms&#34;&gt;Information Security Algorithms
&lt;/h2&gt;&lt;h3 id=&#34;encryption-algorithms&#34;&gt;Encryption Algorithms
&lt;/h3&gt;&lt;p&gt;Modern cryptography classifies encryption techniques into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single-key algorithms&lt;/li&gt;
&lt;li&gt;Dual-key algorithms&lt;/li&gt;
&lt;li&gt;Keyless algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Single-key algorithms&lt;/strong&gt;, known as symmetric encryption, use the same key for encryption and decryption.&lt;br&gt;
&lt;strong&gt;Dual-key algorithms&lt;/strong&gt;, or asymmetric encryption, use different keys for encryption and decryption.&lt;br&gt;
&lt;strong&gt;Keyless algorithms&lt;/strong&gt;, also called random key algorithms, generate a unique key for each use, making them an ideal but less common method due to design challenges.&lt;/p&gt;
&lt;h4 id=&#34;symmetric-encryption-algorithms&#34;&gt;Symmetric Encryption Algorithms
&lt;/h4&gt;&lt;p&gt;Symmetric encryption, also known as private-key encryption, involves using the same key for encryption and decryption. Standard symmetric encryption algorithms include DES, IDEA (based on DES), 3DES, RC4, RC5, RC6, and AES.&lt;/p&gt;
&lt;p&gt;Critical characteristics of symmetric encryption:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fast, suitable for encrypting extensive data.&lt;/li&gt;
&lt;li&gt;The security of the algorithm depends on the key&amp;rsquo;s confidentiality.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;asymmetric-encryption-algorithms&#34;&gt;Asymmetric Encryption Algorithms
&lt;/h3&gt;&lt;p&gt;Asymmetric encryption uses a public key for encryption and a private key for decryption. Standard algorithms include RSA, ECC, and DSA.&lt;/p&gt;
&lt;p&gt;Critical characteristics of asymmetric encryption:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slower speed, mainly used for small data encryption.&lt;/li&gt;
&lt;li&gt;Higher security.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;data-verification-algorithms&#34;&gt;Data Verification Algorithms
&lt;/h2&gt;&lt;p&gt;Data verification algorithms fall into three categories: message digests, message authentication, and digital signatures.&lt;/p&gt;
&lt;h3 id=&#34;message-digest-md&#34;&gt;Message Digest (MD)
&lt;/h3&gt;&lt;p&gt;Message digests, or digital digests, use a one-way hash function to &amp;ldquo;digest&amp;rdquo; plaintext into a fixed-length encrypted string, also known as a digital fingerprint. Popular hash algorithms include MD2, MD4, MD5, HAVAL, SHA-1, and SHA256.&lt;/p&gt;
&lt;p&gt;Key characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The process is irreversible.&lt;/li&gt;
&lt;li&gt;The output length is fixed.&lt;/li&gt;
&lt;li&gt;It ensures data integrity.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;message-authentication-ma&#34;&gt;Message Authentication (MA)
&lt;/h3&gt;&lt;p&gt;Message authentication ensures that messages have not been altered during transmission or storage. It often uses hash algorithms combined with encryption to verify the integrity of the message.&lt;/p&gt;
&lt;p&gt;Standard message authentication algorithms use hash functions with keys, known as [HMAC](&lt;a class=&#34;link&#34; href=&#34;https://link.jianshu.com/?t=http://www.ietf.org/rfc/rfc2104.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.ietf.org/rfc/rfc2104.txt&lt;/a&gt;, and combine MD and SHA algorithms with added vital protection.&lt;/p&gt;
&lt;p&gt;Key characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensures data integrity and accuracy.&lt;/li&gt;
&lt;li&gt;The process is irreversible.&lt;/li&gt;
&lt;li&gt;The output length is fixed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;digital-signatures-ds&#34;&gt;Digital Signatures (DS)
&lt;/h3&gt;&lt;p&gt;A digital signature encrypts the message digest using the sender’s private key and sends it with the original message. The receiver decrypts the digest using the sender&amp;rsquo;s public key and compares it to the original message digest.&lt;/p&gt;
&lt;p&gt;Key characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensures data integrity, sender authentication, and non-repudiation.&lt;/li&gt;
&lt;li&gt;The process is irreversible.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sub-summary&#34;&gt;sub summary
&lt;/h3&gt;&lt;p&gt;Characteristics and examples of each algorithm&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Algorithm Type&lt;/th&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Symmetric Encryption&lt;/td&gt;
&lt;td&gt;Fast, suitable for large data/files&lt;/td&gt;
&lt;td&gt;DES, 3DES, AES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Asymmetric Encryption&lt;/td&gt;
&lt;td&gt;Slower, suitable for small data&lt;/td&gt;
&lt;td&gt;RSA, ECC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message Digest (MD)&lt;/td&gt;
&lt;td&gt;Integrity&lt;/td&gt;
&lt;td&gt;MD2, MD4, MD5, SHA1, SHA256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message Authentication (MA)&lt;/td&gt;
&lt;td&gt;Integrity, authenticity&lt;/td&gt;
&lt;td&gt;HMAC-MD5, HMAC-SHA1, HMAC-SHA256, HMAC-SHA384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital Signature (DS)&lt;/td&gt;
&lt;td&gt;Integrity, authenticity, non-repudiation&lt;/td&gt;
&lt;td&gt;RSA, DSA, ECDSA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;evolution-of-security-solutions&#34;&gt;Evolution of Security Solutions
&lt;/h2&gt;&lt;h3 id=&#34;1-symmetric-encryption&#34;&gt;1. Symmetric Encryption
&lt;/h3&gt;&lt;p&gt;After the development of the Internet, some enterprises began to focus on security, based on symmetric encryption algorithms, designed this program.&lt;br&gt;
The whole process involves only the AES (symmetric) algorithm, only and encrypts the data in transit. As shown in the figure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/5ec40bead81c1e8cc39ef2d1191c38da.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154609&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security Item&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data Security&lt;/td&gt;
&lt;td&gt;Achieved through AES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Integrity&lt;/td&gt;
&lt;td&gt;Not ensured&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Authenticity&lt;/td&gt;
&lt;td&gt;Not ensured, vulnerable to key exposure&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are many drawbacks to this program.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;single key can not realize dynamic key management&lt;/li&gt;
&lt;li&gt;Unable to verify data integrity&lt;/li&gt;
&lt;li&gt;After the key is exposed, the security of the whole program will not be broken.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-symmetric-encryption--message-digest&#34;&gt;2. Symmetric Encryption + Message Digest
&lt;/h3&gt;&lt;p&gt;This solution adds a message digest to ensure data integrity, but the other issues remain.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/ca287695b90caabea7811670b2145148.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154624&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security Item&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data Security&lt;/td&gt;
&lt;td&gt;Achieved through AES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Integrity&lt;/td&gt;
&lt;td&gt;Realized through information summaries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Authenticity&lt;/td&gt;
&lt;td&gt;Not ensured, vulnerable to key exposure&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;drawback&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;single key can not realize dynamic key management&lt;/li&gt;
&lt;li&gt;After the key is exposed, the security of the whole program will not be broken.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-symmetric-encryption--message-authentication&#34;&gt;3. Symmetric Encryption + Message Authentication
&lt;/h3&gt;&lt;p&gt;Symmetric encryption + message digest is used when the security requirements are not exceptionally high. However, there is room for improvement for industries with particularly high-security requirements, such as finance, education, and other sectors. Therefore, people have improved the digest mechanism, the message digest with message authentication code to replace the formation of HTTP + symmetric encryption + message authentication scheme; this scheme is characterized by message authentication code to replace the digest, based on the ordinary digest to increase the two-way checksum, to ensure the authenticity of the data.&lt;br&gt;
The security and disadvantages are similar to the second scheme.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/c5004afdd1fb90b364658dcacadbfd18.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154643&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-asymmetric-encryption&#34;&gt;4. Asymmetric Encryption
&lt;/h3&gt;&lt;p&gt;Asymmetric encryption solves the issue of key exposure by using a public-private key pair, providing higher security but at the cost of performance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/33468a28c5a018305c4a411b1962f056.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154651&#34;
	
	
&gt;&lt;br&gt;
&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security Item&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data Security&lt;/td&gt;
&lt;td&gt;Achieved via RSA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Integrity (Tamper-proof)&lt;/td&gt;
&lt;td&gt;Achieved via RSA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Authenticity (Anti-forgery)&lt;/td&gt;
&lt;td&gt;Achieved through RSA public and private key pairing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;drawback&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Poor performance, slow speed&lt;/li&gt;
&lt;li&gt;Not suitable for extensive data or file encryption/decryption&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-symmetric-encryption--message-authentication--asymmetric-encryption&#34;&gt;5. Symmetric Encryption + Message Authentication + Asymmetric Encryption
&lt;/h3&gt;&lt;p&gt;All of the above schemes have flaws, which stem from the encryption algorithms, so is there a way to combine symmetric and asymmetric encryption to complement each other&amp;rsquo;s weaknesses? The answer is yes; human wisdom is infinite, so this scheme comes to mind:&lt;br&gt;
The message is encrypted with symmetric encryption, and the key of the symmetric algorithm is encrypted with asymmetric encryption so that efficiency and security are considered. As shown in the figure below, using AES + authentication + RSA as an example:&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/27378a2bfd1432e8b7abc4634163e44f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154027&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security Item&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data Security&lt;/td&gt;
&lt;td&gt;Achieved through AES and RSA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Integrity&lt;/td&gt;
&lt;td&gt;Ensured via HMAC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Authenticity&lt;/td&gt;
&lt;td&gt;Ensured with RSA public-private key pair&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The solution is secure enough to meet the vast majority of security requirements. Many companies use this type of program now.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AES encryption of the original message, fast&lt;/li&gt;
&lt;li&gt;HMAC on the AES result authentication code to ensure the authenticity of the data&lt;/li&gt;
&lt;li&gt;each time the keys of AES and HMAC are randomly generated, to achieve the effect of dynamic keys&lt;/li&gt;
&lt;li&gt;the RSA algorithm guarantees the security of the key, and the data is small, to play the advantages of RSA&lt;/li&gt;
&lt;li&gt;the key of RSA is two groups, realizing two-way authentication.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;This article outlines the basics of encryption algorithms, including symmetric and asymmetric encryption, message authentication, and digital signatures. It also explores the evolution of security solutions, illustrating how modern transmission security balances performance and security. These concepts provide the groundwork for developing secure APIs in future discussions.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用JOSE 来保护你的API 1  基础知识</title>
        <link>https://huizhou92.com/draft/%E4%BD%BF%E7%94%A8jose-%E6%9D%A5%E4%BF%9D%E6%8A%A4%E4%BD%A0%E7%9A%84api-1--%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Thu, 17 Oct 2024 15:52:21 +0800</pubDate>
        
        <guid>https://huizhou92.com/draft/%E4%BD%BF%E7%94%A8jose-%E6%9D%A5%E4%BF%9D%E6%8A%A4%E4%BD%A0%E7%9A%84api-1--%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;p&gt;伴随这互联网技术的发展，数据安全成了头等大事。数据安全的范畴很大，包含：技术安全、服务安全、存储安全、传输安全等。本文主要是从传输安全的层面，如何开发安全的API。&lt;br&gt;
目前规划的是几篇。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础知识&lt;/li&gt;
&lt;li&gt;JOSE 简介，以及JWT、JWE  的实现。&lt;/li&gt;
&lt;li&gt;证书&lt;/li&gt;
&lt;li&gt;https 如何保护 web&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oauth2.0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本篇文章的主要内容是梳理了几种加密算法以及校验算法，比较学术，可以为后面的实践打下基础。 我们开始吧。&lt;/p&gt;
&lt;h2 id=&#34;信息安全算法&#34;&gt;信息安全算法
&lt;/h2&gt;&lt;h3 id=&#34;加密相关算法&#34;&gt;加密相关算法
&lt;/h3&gt;&lt;p&gt;现代密码学中，把算法的加密技术主要分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单密钥形式&lt;/li&gt;
&lt;li&gt;双密钥形式&lt;/li&gt;
&lt;li&gt;无密钥模式&lt;br&gt;
单密钥模式，也称为对称密钥模式，加密和解密方采用同一个密钥。采用这种模式的算法就叫做对称加密算法。&lt;br&gt;
双密钥模式，也称作非对称密钥模式，加密和解密方采用不同的密钥。采用这种模式的算法就叫做非对称加密算法。&lt;br&gt;
无密钥模式，也称作随机密钥模式，每次的密钥都是随机生成，使用一次之后失效。这是一种理想的加密模式，由于设计难度大，目前未得到广泛应用，这里不涉及讨论&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对称加密算法-symmetric-key-algorithm&#34;&gt;对称加密算法 Symmetric-key algorithm
&lt;/h4&gt;&lt;p&gt;对称加密算法，又称私钥加密算法，顾名思义加密和解密过程中只用到一个密钥，该密钥也称作私钥。常见的对称加密算法有：DES、IDEA(基于DES)、3DES(基于DES)、RC4、RC5、RC6、AES等。&lt;br&gt;
对称加密有以下特点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;速度较快，可适用于大数据加密；&lt;/li&gt;
&lt;li&gt;算法公开，密钥安全决定该算法安全；应用过程中要严格管理密钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;非对称加密算法-asymmetric-encryption&#34;&gt;非对称加密算法 Asymmetric Encryption
&lt;/h3&gt;&lt;p&gt;非对称加密算法，又称公私钥加密算法，顾名思义加密和解密过程使用不同的密钥。公钥即为公开的密钥，一般用作加密；私钥即为私有的密钥，一般用作解密。 常见的非对称加密算法有：RSA、ECC、DSA等&lt;br&gt;
非对称加密算法 的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;速度慢，用于较小数据的加密；&lt;/li&gt;
&lt;li&gt;安全系数高&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;信息校验相关算法&#34;&gt;信息校验相关算法
&lt;/h2&gt;&lt;p&gt;信息校验相关算法主要分为3类：信息摘要、信息认证、信息签名。&lt;/p&gt;
&lt;h3 id=&#34;信息摘要md-message-digest&#34;&gt;信息摘要（MD-Message Digest）
&lt;/h3&gt;&lt;p&gt;信息摘要又称数字摘要，采用单向Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文这一串密文又称为数字指纹，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。&lt;br&gt;
Hash算法又称散列函数，是一种单向的，从明文到密文的映射过程。&lt;br&gt;
常见算法的Hash算法有：MD2、MD4、MD5、HAVAL、SHA-1、SHA256等。&lt;/p&gt;
&lt;h4 id=&#34;特点&#34;&gt;特点
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;过程不可逆。&lt;/li&gt;
&lt;li&gt;输出数据长度固定。&lt;/li&gt;
&lt;li&gt;保证数据的完整性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ma-message-authentication&#34;&gt;MA-Message Authentication
&lt;/h3&gt;&lt;p&gt;消息认证是指通过对消息或者消息有关的信息进行加密或签名变换进行的认证，目的是为了防止传输和存储的消息被有意无意的篡改，包括消息内容认证（即消息完整性认证）、消息的源和宿认证（即身份认证0)、及消息的序号和操作时间认证等。&lt;br&gt;
消息认证通常在摘要算法基础上再做一个对称或非对称加密算法，用于防止信息被窃取，用于证明原文的完整性和准确性，也就是说，消息认证主要用于防止信息被篡改。&lt;br&gt;
常用的消息认证算法是含有密钥散列函数算法，兼容了MD和SHA算法的特性，并在此基础上加上了密钥，通常也称为[HMAC](&lt;a class=&#34;link&#34; href=&#34;https://link.jianshu.com/?t=http://www.ietf.org/rfc/rfc2104.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.ietf.org/rfc/rfc2104.txt&lt;/a&gt;算法。&lt;br&gt;
特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保证数据完整性、准确性&lt;/li&gt;
&lt;li&gt;过程不可逆&lt;/li&gt;
&lt;li&gt;输出数据长度固定&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数字签名ds-digital-signature&#34;&gt;数字签名（DS-Digital Signature）
&lt;/h3&gt;&lt;p&gt;数字签名技术是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。&lt;br&gt;
数字签名保证信息传输的完整性、发送者的身份认证、防止交易中的抵赖发生。&lt;br&gt;
常用的数字签名算法都是信息摘要的基础上用一个非对称加密算法进行加密处理。&lt;br&gt;
常用的数字签名算法有：RSA、DSA、ECDSA等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保证数据的完整性、正确性、不可抵赖性。&lt;/li&gt;
&lt;li&gt;过程不可逆。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法类型&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;算法举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;对称加密 - Symmetric Encryption&lt;/td&gt;
&lt;td&gt;速度快、可用于处理大数据、文件&lt;/td&gt;
&lt;td&gt;DES、3DES、AES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非对称加密 - Asymmetric Encryption&lt;/td&gt;
&lt;td&gt;速度慢、用户小数据&lt;/td&gt;
&lt;td&gt;RSA、ECC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息摘要(MD) - Message Digest&lt;/td&gt;
&lt;td&gt;完整性&lt;/td&gt;
&lt;td&gt;MD2、MD4、MD5、SHA1、SHA256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息认证(MA) - Message Authentication&lt;/td&gt;
&lt;td&gt;完整性、真实性&lt;/td&gt;
&lt;td&gt;HMAC-MD5、HMAC-SHA1、HMAC-SHA256、HMAC-SHA384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数字签名(DS) - Digital Signature&lt;/td&gt;
&lt;td&gt;完整性、真实性、不可抵赖性&lt;/td&gt;
&lt;td&gt;RSA、DSA、ECDSA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;安全方案演变&#34;&gt;安全方案演变
&lt;/h2&gt;&lt;h3 id=&#34;1-对称加密&#34;&gt;1. 对称加密
&lt;/h3&gt;&lt;p&gt;互联网发展起来后，部分企业开始注重安全，基于对称加密算法，设计了此方案。&lt;br&gt;
整个过程中只涉及到AES(对称)算法，仅且对传输中的数据进行加密。 如图所示：&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/5ec40bead81c1e8cc39ef2d1191c38da.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154609&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;安全性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;安全项&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据安全&lt;/td&gt;
&lt;td&gt;通过AES实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据完整性(防篡改)&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据真实性(防伪造)&lt;/td&gt;
&lt;td&gt;无，密钥暴露之后，可以被任意伪造&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个方案有很多缺点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;密钥单一，无法实现动态密钥管理&lt;/li&gt;
&lt;li&gt;无法验证数据完整性&lt;/li&gt;
&lt;li&gt;密钥暴露之后，整套方案的安全性不攻自破&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-对称加密消息摘要&#34;&gt;2. 对称加密+消息摘要
&lt;/h3&gt;&lt;p&gt;这个方案是在 第一个方案上添加 消息摘要，保证数据完整性，但是其他两个缺点一样存在。&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/ca287695b90caabea7811670b2145148.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154624&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;安全性。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;安全项&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据安全&lt;/td&gt;
&lt;td&gt;通过AES实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据完整性(防篡改)&lt;/td&gt;
&lt;td&gt;通过信息摘要实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据真实性(防伪造)&lt;/td&gt;
&lt;td&gt;无，密钥暴露之后，可以被任意伪造&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;密钥单一，无法实现动态密钥管理&lt;/li&gt;
&lt;li&gt;密钥暴露之后，整套方案的安全性不攻自破&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-对称加密消息认证&#34;&gt;3. 对称加密+消息认证
&lt;/h3&gt;&lt;p&gt;对称加密+消息摘要的方式已经在一些对安全性要求不是特别高的场合下使用了，但是对于安全性要求特别高的行业比如金融、教育等行业，还有待提高。所以人们改进了摘要机制，把消息摘要用消息认证码替换，形成了HTTP+对称加密+消息认证的方案，这个方案 的特点是用消息认证码替换摘要，在普通的摘要基础上增加双向的校验，保证了数据的真实性。&lt;br&gt;
安全性跟缺点跟第二种方案差不多。&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/c5004afdd1fb90b364658dcacadbfd18.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154643&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-非对称加密&#34;&gt;4. 非对称加密
&lt;/h3&gt;&lt;p&gt;前面的方案都是基于非对称加密算法，统一的缺陷就是密钥单一，无法实现动态管理，密钥本身的安全性得到了很大的威胁。基于这个考虑，提出了此方案。&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/33468a28c5a018305c4a411b1962f056.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154651&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;用非对称加密算法，整体替换对称加密算法。安全性都得到了保证，唯一的缺陷就是非对称加密算法的效率太慢，不适合大数据的加密。&lt;br&gt;
安全性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据安全&lt;/td&gt;
&lt;td&gt;通过RSA实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据完整性(防篡改)&lt;/td&gt;
&lt;td&gt;通过RSA实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据真实性(防伪造)&lt;/td&gt;
&lt;td&gt;RSA的公钥和私钥配对实现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;性能低下，速度慢&lt;/li&gt;
&lt;li&gt;不适用于大数据以及文件的加解密&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-对称加密消息认证非对称加密&#34;&gt;5. 对称加密+消息认证+非对称加密
&lt;/h3&gt;&lt;p&gt;上述所有的方案都有缺陷，缺陷本身来源于加密算法，那么有没有一种办法把对称加密和非对称加密结合起来，互补对方的缺陷呢？答案是肯定，人类的智慧是无穷，于是想到这种方案：&lt;/p&gt;
&lt;p&gt;报文用对称加密，对称算法的密钥用非对称加密，这样就兼顾了效率与安全。如下图所示，用AES+认证+RSA举例：&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/10/27378a2bfd1432e8b7abc4634163e44f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20241017154027&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从安全的层面，该方案已经足够安全，能够达到绝大数的安全需求。现在市面上用此类方案的公司也很多。&lt;/p&gt;
&lt;p&gt;1，AES加密原始报文，速度快&lt;br&gt;
2，HMAC对AES结果认证码，确保数据真实性&lt;br&gt;
3，每次AES和HMAC的密钥都是随机生成，达到动态密钥的效果&lt;br&gt;
4，密钥的安全由RSA算法保证，数据小，发挥RSA的优点&lt;br&gt;
5，RSA的密钥为2组，实现了双向认证。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;本文对加密算法的基础知识进行了梳理，探讨了对称加密、非对称加密、消息认证、数字签名等安全技术，及其在实际应用中的安全方案演进。结合对称加密的高效率与非对称加密的高安全性，现代传输安全方案在性能和安全性之间找到了平衡。这些理论为后续讨论如何在实际 API 开发中实现传输安全奠定了基础。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
