<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hyrum on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/tags/hyrum/</link>
        <description>Recent content in Hyrum on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Wed, 08 Jan 2025 11:55:37 +0800</lastBuildDate><atom:link href="https://huizhou92.com/tags/hyrum/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Software Engineering: Hyrum&#39;s Law</title>
        <link>https://huizhou92.com/p/software-engineering-hyrums-law/</link>
        <pubDate>Wed, 08 Jan 2025 11:55:37 +0800</pubDate>
        
        <guid>https://huizhou92.com/p/software-engineering-hyrums-law/</guid>
        <description>&lt;img src="https://images.hxzhouh.com/blog-images/2025/01/d84fece1bcb074ea83d61d4e2c43a8a2.webp" alt="Featured image of post Software Engineering: Hyrum&#39;s Law" /&gt;&lt;p&gt;In software development, have you ever encountered a situation where you are developing a shopping cart feature that requires storing product information in a database when a user adds an item? You might have designed a straightforward function as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addToCart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// add to db&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In this method, you assume that the database storage operation will always succeed without considering potential errors such as connection failures, write errors, or incorrect data formats.&lt;/p&gt;
&lt;p&gt;If you assume that the operation will always succeed and do not account for error conditions, you may encounter issues highlighted by Hyrum&amp;rsquo;s Law.&lt;/p&gt;
&lt;h2 id=&#34;what-is-hyrums-law&#34;&gt;What is Hyrum&amp;rsquo;s Law?
&lt;/h2&gt;&lt;p&gt;Hyrum&amp;rsquo;s Law is a principle in software development that states:&lt;br&gt;
&lt;strong&gt;“When you depend on an API, you also depend on its implementation details.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In other words, even if an API is defined and documented, the various ways it can be implemented should be considered when using that API. You must consider the implementation details, not just the declared functionality.&lt;/p&gt;
&lt;p&gt;Hyrum&amp;rsquo;s Law is named after Google engineer &lt;a class=&#34;link&#34; href=&#34;https://x.com/hyrumwright&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hyrum Wright&lt;/a&gt;, who introduced the concept in a presentation.&lt;/p&gt;
&lt;p&gt;Hyrum Wright emphasized that developers should pay more attention to API implementation details, as these aspects can affect their code&amp;rsquo;s future maintainability and stability.&lt;/p&gt;
&lt;h2 id=&#34;importance-of-hyrums-law&#34;&gt;Importance of Hyrum&amp;rsquo;s Law
&lt;/h2&gt;&lt;p&gt;Hyrum&amp;rsquo;s Law serves several significant purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Awareness of Implementation Details:&lt;/strong&gt; This reminds developers that it is crucial to understand an API&amp;rsquo;s functionalities, implementation details, and limitations when using it. APIs are commonplace in software development, helping us quickly implement features and improve productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implications for Code Behavior:&lt;/strong&gt; How APIs are implemented can significantly affect code behavior and may lead to unforeseen issues. Hyrum’s Law emphasizes the need to evaluate implementation details and stability carefully to prevent potential problems and enhance code maintainability and reliability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adaptation to Changes:&lt;/strong&gt; The law also underscores software development&amp;rsquo;s iterative and evolving nature. As software requirements and technical environments change, API implementations may also grow. Thus, staying abreast of these changes is vital for maintaining software quality and stability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;a-case-study&#34;&gt;A Case Study
&lt;/h2&gt;&lt;p&gt;In Go&amp;rsquo;s source code, there are echoes of Hyrum&amp;rsquo;s Law.&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2025/01/364f331ca65e0d92eb86d66a74167f81.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34; Hyrum’s Law in the Go Source Code&#34;
	
	
&gt;&lt;br&gt;
For instance, in &lt;code&gt;./src/net/http/request.go:1199&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MaxBytesError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Due to Hyrum&amp;#39;s law, this text cannot be changed.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http: request body too large&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This raises the question: why is it a concern? Changing an error message might affect other users relying on that message.&lt;/p&gt;
&lt;p&gt;I have encountered similar issues where upstream database changes in &lt;code&gt;ErrCode&lt;/code&gt; affected my business logic.&lt;/p&gt;
&lt;h2 id=&#34;practical-recommendations-for-hyrums-law&#34;&gt;Practical Recommendations for Hyrum&amp;rsquo;s Law
&lt;/h2&gt;&lt;p&gt;Here are some suggestions to effectively implement Hyrum’s Law in practice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understand API Documentation:&lt;/strong&gt; Before using an API, carefully read its documentation and specifications to understand its features, uses, limitations, and potential issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write Robust Code:&lt;/strong&gt; When utilizing APIs, ensure robust error handling and consider various error and exception scenarios to bolster code reliability and stability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Stable API Versions:&lt;/strong&gt; When multiple API versions are available, opt for stable versions and avoid deprecated or obsolete ones whenever possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conduct Integration and Unit Tests:&lt;/strong&gt; Write integration and unit tests to validate the API&amp;rsquo;s correctness and stability and promptly address any emerging issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be Aware of API Dependencies:&lt;/strong&gt; Pay attention to API dependencies, avoiding unnecessary dependencies while ensuring that those you do use are reliable and stable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Promptly Address API Changes:&lt;/strong&gt; Stay informed about and adapt to changes in API implementations to maintain software quality and stability amidst evolving requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, adhering to these best practices can help you better apply Hyrum&amp;rsquo;s Law, enhance the maintainability and stability of your code, and adapt to changes and innovations in the software development process.&lt;/p&gt;
&lt;h2 id=&#34;anti-patterns-related-to-hyrums-law&#34;&gt;Anti-Patterns Related to Hyrum&amp;rsquo;s Law
&lt;/h2&gt;&lt;p&gt;In addition to standard practices, here are some prevalent anti-patterns that detract from the principles of Hyrum’s Law:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direct Dependency on Implementation:&lt;/strong&gt; Some developers may ignore API specifications and directly rely on its concrete implementations, leading to tight coupling and increased fragility and maintenance challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neglecting API Limitations:&lt;/strong&gt; Failing to consider API limitations and exceptions can result in code uncertainty and unreliability, as developers might assume the API will always function correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direct Use of Low-Level Libraries:&lt;/strong&gt; Bypassing API encapsulation by using low-level libraries or components can complicate code and hinder maintainability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ignoring API Version Changes:&lt;/strong&gt; Developers who overlook API version changes may face compatibility issues and maintenance difficulties, risking disconnection from technological advancements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unreasonable Additions or Removals of Dependencies:&lt;/strong&gt; Improperly managed dependencies can create confusion and complexity, hindering maintainability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Avoiding these anti-patterns can ensure better alignment with Hyrum’s Law, ultimately leading to more maintainable and stable code.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Hyrum&amp;rsquo;s Law is a vital principle that underscores the importance of focusing on a system&amp;rsquo;s core functionalities and considering various dependencies and side effects present within complex systems.&lt;/p&gt;
&lt;p&gt;Assuming everything is functioning correctly without accounting for dependencies and side effects can result in unexpected issues that might lead to system failures or other significant problems.&lt;/p&gt;
&lt;p&gt;As developers, we must be mindful of the traps posed by Hyrum&amp;rsquo;s Law and consider best practices to ensure the stability and reliability of our code.&lt;/p&gt;
&lt;p&gt;In conclusion, Hyrum&amp;rsquo;s Law is of paramount importance. For developers, understanding this principle and applying it in practice will enhance code quality and reliability, subsequently providing users with better experiences.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/p/software-engineering-hyrums-law/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Long Time Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you find my blog helpful, please subscribe to me via &lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/index.xml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or follow me on &lt;a class=&#34;link&#34; href=&#34;https://x.com/@piaopiaopig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt; account, follow me there. My articles will be published there as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
