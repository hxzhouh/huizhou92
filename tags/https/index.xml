<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Https on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/tags/https/</link>
        <description>Recent content in Https on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Mon, 27 May 2024 18:37:27 +0800</lastBuildDate><atom:link href="https://huizhou92.com/tags/https/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Understanding HTTPS: Key Points and Processes Explained in Detail</title>
        <link>https://huizhou92.com/p/the-key-points-of-https/</link>
        <pubDate>Mon, 27 May 2024 18:37:27 +0800</pubDate>
        
        <guid>https://huizhou92.com/p/the-key-points-of-https/</guid>
        <description>&lt;img src="https://images.yixiao9206.cn/blog-images/2024/05/9113c36ee94b362ffe79a997b75c8efe.png" alt="Featured image of post Understanding HTTPS: Key Points and Processes Explained in Detail" /&gt;&lt;p&gt;As we all know, HTTPS can solve the security issues in HTTP plaintext transmission, especially the problem of man-in-the-middle attacks. Its original full name is HTTP over SSL (or HTTP Security). SSL stands for Secure Sockets Layer, which was later replaced by TLS (Transport Layer Security). Today, let&amp;rsquo;s summarize the key points of HTTPS.&lt;/p&gt;
&lt;!-- more--&gt;
&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;https-versions&#34;&gt;HTTPS Versions
&lt;/h2&gt;&lt;p&gt;People generally refer to the SSL and TLS protocols as the SSL/TLS protocol, but when people mention SSL in daily conversations, they usually mean the TLS protocol.&lt;br&gt;
TLS protocol has versions 1.1, 1.2, and 1.3. Among them, 1.2 used to be the mainstream, but now it is recommended to use the improved TLS 1.3, which upgrades the Handshake and Record protocols to make communication more secure and efficient.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/22e2063c4833a437e681f43255089763.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In terms of security, TLS 1.3 removes some encryption algorithms that were considered insecure in TLS 1.2, such as RC4, DES, 3DES, AES-CBC, and MD5, which reduces the risk of security vulnerabilities.&lt;/p&gt;
&lt;p&gt;In terms of performance, TLS 1.3 reduces the number of round trips (RTT) during the handshake process, thereby speeding up the connection establishment. In the best case scenario, TLS 1.3 only requires one round trip to complete the handshake, and it also supports 0-RTT extension, while TLS 1.2 requires two or more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/fa599169a9d68465dcb66b42f6e4226c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, as a well-designed Internet protocol, TLS 1.3 also considers maximizing forward compatibility through the extension protocol of the hello handshake message, which is not elaborated here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/233d0bfa01e9c759211873abb971a080.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;core-process-of-https&#34;&gt;Core Process of HTTPS
&lt;/h2&gt;&lt;p&gt;Depending on the differences in different versions, the detailed processes may vary slightly. Without pursuing rigorous details, the working process of HTTPS is as follows.&lt;br&gt;
&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/1c1c9c816302b79718955b07442fc097.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://blog.bytebytego.com/i/53596514/how-does-https-work&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This diagram by bytebytego is very expressive, showing the key interactions and core encryption processes. The most crucial steps are how to establish a TCP connection, how to negotiate symmetric encryption keys through asymmetric encryption, and finally communicate through symmetric encryption.&lt;/p&gt;
&lt;p&gt;HTTPS, more precisely TLS, is well-designed. The key components are the Record Layer and several protocols. The former is the data transport channel, and various sub-protocols run on it. The Record is the basic unit of data transmission in TLS, similar to TCP segments and IP packets, which is the meaning of the following diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/08895cd805cbe5719c80662f7be74df7.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The most important protocol in the Protocol is the Handshake protocol. After capturing the Client Hello, it will be more clearly reflected in Wireshark.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/9aa18213dbe2e2651ea227fe404ad6b5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;https-sni-extension&#34;&gt;HTTPS SNI Extension
&lt;/h2&gt;&lt;p&gt;In the early days of the Internet, single-server machines were not that powerful, and the accompanying HTTPS, such as SSL v2, also had design flaws. At that time, there was an assumption that a single-server with an IP would only host one domain service. Therefore, after DNS resolution, it was very certain to directly connect to the IP and use the specific certificate for a particular domain. However, with the explosion of cloud computing, virtual hosting, and the scarcity of IP addresses in IPv4, it is inevitable that a server will host multiple domain scenes. This poses a problem for servers in not knowing which domain&amp;rsquo;s SSL certificate the client wants to access, which led to the emergence of HTTPS SNI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/2af263a13abf6545b697a0dabd01785d.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;SNI (Server Name Indication) is an extension of the TLS protocol, which allows the client to send the target hostname information to the server during the handshake process. This way, the server can host multiple domains&amp;rsquo; HTTPS services on the same IP address and provide the correct certificate for each domain.&lt;/p&gt;
&lt;p&gt;This problem seems simple, but in the early stages of the widespread adoption of HTTPS and the move of various Internet service providers to full-site HTTPS, many CDN vendors did not support SNI. Of course, today in 2024, both software ecosystems like Nginx and various vendors already support it.&lt;/p&gt;
&lt;p&gt;SNI information is transmitted through the TLS handshake protocol. The packet capture diagram is roughly as follows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/632f58a2b5911fc34ca5f6716b0e9992.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In practice, you can use the &lt;code&gt;-servername&lt;/code&gt; option in the &lt;code&gt;openssl s_client&lt;/code&gt; subcommand to specify SNI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl s_client -connect example.com:443 -servername example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you use the OpenSSL Library, you can also use functions like &lt;code&gt;SSL_set_tlsext_host_name&lt;/code&gt; and &lt;code&gt;BIO_set_conn_hostname&lt;/code&gt; to set SNI in the code.&lt;/p&gt;
&lt;h2 id=&#34;https-certificate-mechanism&#34;&gt;HTTPS Certificate Mechanism
&lt;/h2&gt;&lt;p&gt;HTTPS achieves a series of encryption, decryption, signing, verification, and other functions through the public key system&amp;rsquo;s asymmetric, symmetric, and hash algorithms, basically realizing the four security properties: confidentiality, integrity, authentication, and non-repudiation. It also provides solutions for typical man-in-the-middle attacks (MITM).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/689e0bbb76ecda3332862356747ea71d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;To solve the trust issue of public keys, the certificate and trust chain mechanism are introduced. A certificate is issued by a third-party Certificate Authority (CA). It is essentially a file, usually stored with extensions like .crt, .cer, or .pem. This file is encoded according to certain standards, such as X.509, and contains information such as the public key, certificate holder information, issuing authority information, validity period, and digital signature.&lt;/p&gt;
&lt;p&gt;There are some well-known CA organizations, such as DigiCert, VeriSign, Entrust, Let&amp;rsquo;s Encrypt, etc. The certificates they issue are divided into DV, OV, and EV, corresponding to different levels of trust. However, CA itself also has trust issues. The trust of small CAs relies on the signature and authentication of large CAs, but when it reaches the end of the chain, it can only use &amp;ldquo;self-signed certificates&amp;rdquo; or &amp;ldquo;root certificates&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/c901e34959e328f1b9b5be02155d7f1f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Most operating systems and browsers have built-in root certificates for major CAs, and during HTTPS communication, the certificate chain is verified layer by layer until the root certificate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/1fe05d3e7e1932f5754b71d4c7324a2d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;https-software-ecosystem&#34;&gt;HTTPS Software Ecosystem
&lt;/h2&gt;&lt;p&gt;Although the HTTPS or TLS ecosystem is rich, OpenSSL dominates the field. It supports almost all publicly available encryption algorithms and protocols and has become the de facto standard. Many applications use it as the underlying library to implement TLS functionality, such as the famous Apache, Nginx, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/0b6cfa177e827e1d5ff6659024b945c8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OpenSSL originated from SSLeay and has branched out into many branches, such as Google&amp;rsquo;s BoringSSL and OpenBSD&amp;rsquo;s LibreSSL. OpenSSL&amp;rsquo;s content is also extremely comprehensive, and learning can be prioritized using the &lt;code&gt;openssl&lt;/code&gt; command. For specific details, you can refer to ChatGPT.&lt;/p&gt;
&lt;h2 id=&#34;https-acceleration-solutions&#34;&gt;HTTPS Acceleration Solutions
&lt;/h2&gt;&lt;p&gt;HTTPS is great, but great things come at a cost. Therefore, various optimizations for full-site HTTPS deployment can basically be written as a separate article. Here are some brief points.&lt;/p&gt;
&lt;p&gt;First is optimizing RTT, which is particularly important in IO-intensive Internet scenarios. It mainly involves protocol upgrades, such as upgrading to HTTP/3 and TLS 1.3, which optimize RTT through different principles. Second is optimizing single-step performance, such as adding TLS acceleration cards, setting up dedicated TLS clusters or modules, and paying attention to terms like TLS session resumption.&lt;br&gt;
I have written an article before, sharing why HTTPS is so slow. If you are interested, you can read it here: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/gitconnected/why-does-https-need-7-handshakes-and-9-times-delay-e29d0a9d046a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why does HTTPS need 7 handshakes and 9 times delay?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.globalsign.com/en/blog/the-difference-between-http-and-https&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What&amp;rsquo;s the difference between HTTP and HTTPS?&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.bytebytego.com/i/53596514/how-does-https-work&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;how-does-https-work&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
