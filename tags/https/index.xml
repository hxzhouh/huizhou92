<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Https on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/tags/https/</link>
        <description>Recent content in Https on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright Â© 2023 huizhou92</copyright>
        <lastBuildDate>Fri, 28 Jun 2024 18:24:40 +0800</lastBuildDate><atom:link href="https://huizhou92.com/tags/https/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why does HTTPS need 7 handshakes and 9 times delay?</title>
        <link>https://huizhou92.com/p/why-does-https-need-7-handshakes-and-9-times-delay/</link>
        <pubDate>Fri, 28 Jun 2024 18:24:40 +0800</pubDate>
        
        <guid>https://huizhou92.com/p/why-does-https-need-7-handshakes-and-9-times-delay/</guid>
        <description>&lt;p&gt;HTTP (Hypertext Transfer Protocol) has become the most widely used application layer protocol on the Internet. However, it is primarily a network protocol for transferring hypertext and provides no security guarantees. Transmitting data packets in plaintext over the Internet makes eavesdropping and man-in-the-middle attacks possible. Transmitting passwords over HTTP is essentially the same as running naked on the Internet.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9000447749076746&#34;
crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    &lt;ins class=&#34;adsbygoogle&#34;
    style=&#34;display:block; text-align:center;&#34;
    data-ad-layout=&#34;in-article&#34;
    data-ad-format=&#34;fluid&#34;
    data-ad-client=&#34;ca-pub-9000447749076746&#34;
    data-ad-slot=&#34;5063552270&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9000447749076746&#34;
crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    &lt;ins class=&#34;adsbygoogle&#34;
    style=&#34;display:block; text-align:center;&#34;
    data-ad-layout=&#34;in-article&#34;
    data-ad-format=&#34;fluid&#34;
    data-ad-client=&#34;ca-pub-9000447749076746&#34;
    data-ad-slot=&#34;5063552270&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This article was first published in the Medium MPP plan. If you are a Medium user, please follow me on &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 1994, Netscape designed the HTTPS (Hypertext Transfer Protocol Secure) protocol, which uses the Secure Sockets Layer (SSL) to ensure secure data transmission. With the development of the Transport Layer Security (TLS) protocol, we have replaced the deprecated SSL protocol with TLS, although the term &amp;ldquo;SSL certificate&amp;rdquo; is still used.&lt;/p&gt;
&lt;p&gt;HTTPS is an extension of the HTTP protocol that allows us to transmit data over the Internet securely. However, the initial request in an HTTPS connection requires 4.5 times the round-trip time (RTT) compared to HTTP. This article will provide a detailed explanation of the request and response process, analyzing why the HTTPS protocol requires 4.5 RTT to obtain a response from the service provider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP Protocol: Both communication parties establish a TCP connection through a three-way handshake.&lt;/li&gt;
&lt;li&gt;TLS Protocol: Both communication parties establish a TLS connection through a four-way handshake.&lt;/li&gt;
&lt;li&gt;HTTP Protocol: The client sends a request to the server, and the server responds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The analysis is based on specific versions of protocol implementations and common scenarios. With the advancement of network technology, we can reduce the number of required network communications. This article will mention some common optimization solutions in the corresponding sections.&lt;/p&gt;
&lt;h3 id=&#34;tcp&#34;&gt;TCP
&lt;/h3&gt;&lt;p&gt;As an application layer protocol, HTTP relies on a lower-level transport layer protocol to provide basic data transmission functionality. TCP is commonly used as the underlying protocol for HTTP. To prevent the establishment of erroneous historical connections, TCP communication parties perform a three-way handshake to establish a TCP connection&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;https://draveness.me/whys-the-design-https-latency/#fn:6&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;. Let&amp;rsquo;s briefly review the entire process of establishing a TCP connection.&lt;br&gt;
&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/02/8b676b2c6764adbe073c57f12fcdf1af.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240220200057&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client sends a segment with the &lt;code&gt;SYN&lt;/code&gt; flag and the initial sequence number of the data segment (&lt;code&gt;SEQ = M&lt;/code&gt;) to the server.&lt;/li&gt;
&lt;li&gt;Upon receiving the segment, the server sends a segment with the &lt;code&gt;SYN&lt;/code&gt; and &lt;code&gt;ACK&lt;/code&gt; flags to the client:
&lt;ul&gt;
&lt;li&gt;The server acknowledges the initial sequence number of the client&amp;rsquo;s data segment by returning &lt;code&gt;ACK = M+1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The server notifies the client of the initial sequence number of the server&amp;rsquo;s data segment by sending &lt;code&gt;SEQ = N&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The client sends a segment with the &lt;code&gt;ACK&lt;/code&gt; flag to the server, confirming the server&amp;rsquo;s initial sequence number, including &lt;code&gt;ACK = N+1&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Through the three-way handshake, the TCP connection parties determine the initial sequence number, window size, and maximum segment size of the TCP connection. This allows the communication parties to ensure that the data segments are not duplicated or missed, control the flow through the window size, and avoid IP fragmentation by using the maximum segment size.&lt;/p&gt;
&lt;p&gt;The original version of the TCP protocol did require a three-way communication to establish a TCP connection. In most current scenarios, the three-way handshake is unavoidable. However, TCP Fast Open (TFO), proposed in 2014, can establish a TCP connection in certain scenarios with just one communication.&lt;br&gt;
&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/02/296cc901d35ef44ebd13290948a29b73.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240220200245&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The TFO strategy uses a TFO Cookie stored on the client to establish a connection with the server quickly. When the client initiates a TCP connection to the server, it includes the TFO option in the SYN message. The server generates a Cookie and sends it to the client. The client caches the Cookie and uses it to establish a TCP connection directly with the server when reconnecting. After verifying the Cookie, the server sends SYN and ACK to the client, initiating data transmission. This reduces the number of communications required.&lt;/p&gt;
&lt;h3 id=&#34;tls&#34;&gt;TLS
&lt;/h3&gt;&lt;p&gt;The purpose of TLS is to build a secure transmission channel on top of the reliable TCP protocol. However, TLS itself does not provide reliability guarantees, so we still need a reliable transport layer protocol underneath. After establishing a reliable TCP connection between the communication parties, we need to exchange keys through the TLS handshake. Here, we will explain the connection establishment process of TLS 1.2:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/02/094fa30c0ac0ea649dcb30db7ce478a8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pasted image 20240220195816&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client sends a Client Hello message to the server, including the client&amp;rsquo;s supported protocol version, encryption algorithms, compression algorithms, and &lt;strong&gt;client-generated random number&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Upon receiving the information about the client&amp;rsquo;s supported protocol version and encryption algorithms, the server:
&lt;ul&gt;
&lt;li&gt;Sends a Server Hello message to the client, specifying the chosen protocol version, encryption method, session ID, and &lt;strong&gt;server-generated random number&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Sends a Certificate message to the client, which includes the server&amp;rsquo;s certificate chain, including information about supported domains, issuers, and expiration dates.&lt;/li&gt;
&lt;li&gt;Sends a Server Key Exchange message, transmitting the &lt;strong&gt;public key&lt;/strong&gt; and signature information.&lt;/li&gt;
&lt;li&gt;Optionally sends a CertificateRequest message, requesting the client&amp;rsquo;s certificate for verification.&lt;/li&gt;
&lt;li&gt;Sends a Server Hello Done message to the client, indicating that all relevant information has been sent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upon receiving the server&amp;rsquo;s protocol version, encryption method, session ID, and certificate, the client verifies the server&amp;rsquo;s certificate:
&lt;ul&gt;
&lt;li&gt;Sends a Client Key Exchange message to the server, including the &lt;strong&gt;pre-master secret&lt;/strong&gt;, which is a random string encrypted with the server&amp;rsquo;s public key.&lt;/li&gt;
&lt;li&gt;Sends a Change Cipher Spec message to the server, indicating that subsequent data segments will be encrypted.&lt;/li&gt;
&lt;li&gt;Sends a Finished message to the server, which includes an encrypted handshake message.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upon receiving the Change Cipher Spec and Finished messages from the client:
&lt;ul&gt;
&lt;li&gt;Sends a Change Cipher Spec message to the client, indicating that subsequent data segments will be encrypted.&lt;/li&gt;
&lt;li&gt;Sends a Finished message to the client, verifying the client&amp;rsquo;s Finished message and completing the TLS handshake.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key to the TLS handshake uses the random strings generated by both communication parties and the server&amp;rsquo;s public key to generate a negotiated key. This symmetric key allows both parties to encrypt messages, preventing eavesdropping and attacks by intermediaries and ensuring secure communication.&lt;/p&gt;
&lt;p&gt;In TLS 1.2, establishing a TLS connection takes 2 RTT. However, TLS 1.3 optimizes the protocol, reducing the round-trip time to one, significantly reducing the time required. After 1 RTT, the client can already transmit application-layer data to the server.&lt;/p&gt;
&lt;p&gt;We won&amp;rsquo;t go into detail about the TLS 1.3 connection establishment process here. In addition to reducing the network overhead in regular handshakes, TLS 1.3 introduces a 0-RTT connection establishment process. 60% of network connections are established when users first visit a website or after a certain interval, while the remaining 40% can be addressed using the 0-RTT strategy of TLS 1.3. However, this strategy, similar to TFO, carries some security risks and should be used with consideration for specific business scenarios.&lt;/p&gt;
&lt;h3 id=&#34;http&#34;&gt;HTTP
&lt;/h3&gt;&lt;p&gt;Transmitting data over a well-established TCP and TLS channel is relatively straightforward. The HTTP protocol can directly utilize the reliable and secure channel established at the lower layers to transmit data. The client writes data to the server using the TCP socket interface, and the server responds through the same means after processing the data. Since the entire process involves the client sending a request and the server returning a response, it takes 1 RTT.&lt;/p&gt;
&lt;p&gt;The data exchange in the HTTP protocol consumes only 1 RTT. When the client and server handle a single HTTP request, we cannot optimize beyond the HTTP protocol itself. However, as the number of requests increases, HTTP/2 allows the reuse of established TCP connections to reduce the additional overhead of TCP and TLS handshakes.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;When a client wants to access a server via HTTPS, the entire process requires 7 handshakes and consumes 9 times the latency. If the RTT is approximately 40ms due to physical distance limitations, the first request requires ~180ms. However, if we want to access a server in the United States with an RTT of approximately 200ms, the HTTPS request will take ~900ms, which is a significant delay. Let&amp;rsquo;s summarize the reasons why the HTTPS protocol requires 9 times the latency to complete communication:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The TCP protocol requires a three-way handshake to establish a reliable TCP connection (1.5 RTT).&lt;/li&gt;
&lt;li&gt;The TLS protocol establishes a TLS connection over TCP through a four-way handshake to ensure communication security (2 RTT).&lt;/li&gt;
&lt;li&gt;The HTTP protocol sends a request and receives a response over TCP and TLS in one round trip (1 RTT).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is important to note that the calculations of round-trip delay in this article are based on specific scenarios and protocol versions. Network protocols are constantly evolving, and issues that were initially overlooked are often addressed through patch updates. However, in the end, a complete rewrite from the ground up is still necessary.&lt;/p&gt;
&lt;p&gt;HTTP/3 is an example of this. It uses the UDP-based QUIC protocol for handshakes, combining the TCP and TLS handshake processes to reduce the 7 handshakes to 3. It directly establishes a reliable and secure transmission channel, reducing the time required from ~900ms to ~500ms. We will cover HTTP/3-related content in future articles. Finally, let&amp;rsquo;s consider some open-ended questions for further exploration. Interested readers can carefully consider the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the similarities and differences between the QUIC protocol and the TCP protocol as transport layer protocols?&lt;/li&gt;
&lt;li&gt;How is it possible to establish a client-server connection using 0-RTT?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;further-reading&#34;&gt;Further Reading
&lt;/h1&gt;&lt;p&gt;Here are some excellent articles that explain TCP three-way handshake, TLS connection, and TCP Fast Open in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://books.google.com.hk/books?id=FLvsis4_QhEC&amp;amp;pg=PA344&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Walls, Colin (2005). Embedded Software: The Works. Newnes. p. 344. ISBN 0-7506-7954-9. Archived from the original on 2019-02-09. Retrieved 2018-10-20.&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.websecurity.digicert.com/security-topics/what-is-ssl-tls-https&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is an SSL Certificate?&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/HTTPS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wikipedia: HTTPS&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/TCP_Fast_Open&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wikipedia: TCP Fast Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tools.ietf.org/html/rfc793&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC793 Transmission Control Protocol, September 1981 RFC793&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tools.ietf.org/html/rfc5246&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC5246 The Transport Layer Security (TLS) Protocol. Version 1.2. Aug 2008 RFC5246&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.rfc-editor.org/info/rfc7413&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, âTCP Fast Openâ, RFC 7413, DOI 10.17487/RFC7413, December 2014,&lt;/a&gt;.Â &lt;a class=&#34;link&#34; href=&#34;https://draveness.me/whys-the-design-https-latency/#fnref:8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;â©ï¸&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tlseminar.github.io/first-few-milliseconds/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The First Few Milliseconds of an TLS 1.2 Connection&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.thesslstore.com/blog/tls-1-3-handshake-tls-1-2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TLS 1.3 Handshake: Taking a Closer Look&lt;/a&gt;Â &lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.cloudflare.com/introducing-0-rtt/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Introducing Zero Round Trip Time Resumption (0-RTT)Â &lt;/a&gt;Â &lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Understanding HTTPS: Key Points and Processes Explained inÂ Detail</title>
        <link>https://huizhou92.com/p/the-key-points-of-https/</link>
        <pubDate>Mon, 27 May 2024 18:37:27 +0800</pubDate>
        
        <guid>https://huizhou92.com/p/the-key-points-of-https/</guid>
        <description>&lt;img src="https://images.yixiao9206.cn/blog-images/2024/05/9113c36ee94b362ffe79a997b75c8efe.png" alt="Featured image of post Understanding HTTPS: Key Points and Processes Explained inÂ Detail" /&gt;&lt;p&gt;As we all know, HTTPS can solve the security issues in HTTP plaintext transmission, especially the problem of man-in-the-middle attacks. Its original full name is HTTP over SSL (or HTTP Security). SSL stands for Secure Sockets Layer, which was later replaced by TLS (Transport Layer Security). Today, let&amp;rsquo;s summarize the key points of HTTPS.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9000447749076746&#34;
crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    &lt;ins class=&#34;adsbygoogle&#34;
    style=&#34;display:block; text-align:center;&#34;
    data-ad-layout=&#34;in-article&#34;
    data-ad-format=&#34;fluid&#34;
    data-ad-client=&#34;ca-pub-9000447749076746&#34;
    data-ad-slot=&#34;5063552270&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9000447749076746&#34;
crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    &lt;ins class=&#34;adsbygoogle&#34;
    style=&#34;display:block; text-align:center;&#34;
    data-ad-layout=&#34;in-article&#34;
    data-ad-format=&#34;fluid&#34;
    data-ad-client=&#34;ca-pub-9000447749076746&#34;
    data-ad-slot=&#34;5063552270&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;https-versions&#34;&gt;HTTPS Versions
&lt;/h2&gt;&lt;p&gt;People generally refer to the SSL and TLS protocols as the SSL/TLS protocol, but when people mention SSL in daily conversations, they usually mean the TLS protocol.&lt;br&gt;
TLS protocol has versions 1.1, 1.2, and 1.3. Among them, 1.2 used to be the mainstream, but now it is recommended to use the improved TLS 1.3, which upgrades the Handshake and Record protocols to make communication more secure and efficient.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/22e2063c4833a437e681f43255089763.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In terms of security, TLS 1.3 removes some encryption algorithms that were considered insecure in TLS 1.2, such as RC4, DES, 3DES, AES-CBC, and MD5, which reduces the risk of security vulnerabilities.&lt;/p&gt;
&lt;p&gt;In terms of performance, TLS 1.3 reduces the number of round trips (RTT) during the handshake process, thereby speeding up the connection establishment. In the best case scenario, TLS 1.3 only requires one round trip to complete the handshake, and it also supports 0-RTT extension, while TLS 1.2 requires two or more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/fa599169a9d68465dcb66b42f6e4226c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, as a well-designed Internet protocol, TLS 1.3 also considers maximizing forward compatibility through the extension protocol of the hello handshake message, which is not elaborated here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/233d0bfa01e9c759211873abb971a080.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;core-process-of-https&#34;&gt;Core Process of HTTPS
&lt;/h2&gt;&lt;p&gt;Depending on the differences in different versions, the detailed processes may vary slightly. Without pursuing rigorous details, the working process of HTTPS is as follows.&lt;br&gt;
&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/1c1c9c816302b79718955b07442fc097.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://blog.bytebytego.com/i/53596514/how-does-https-work&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This diagram by bytebytego is very expressive, showing the key interactions and core encryption processes. The most crucial steps are how to establish a TCP connection, how to negotiate symmetric encryption keys through asymmetric encryption, and finally communicate through symmetric encryption.&lt;/p&gt;
&lt;p&gt;HTTPS, more precisely TLS, is well-designed. The key components are the Record Layer and several protocols. The former is the data transport channel, and various sub-protocols run on it. The Record is the basic unit of data transmission in TLS, similar to TCP segments and IP packets, which is the meaning of the following diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/08895cd805cbe5719c80662f7be74df7.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The most important protocol in the Protocol is the Handshake protocol. After capturing the Client Hello, it will be more clearly reflected in Wireshark.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/9aa18213dbe2e2651ea227fe404ad6b5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;https-sni-extension&#34;&gt;HTTPS SNI Extension
&lt;/h2&gt;&lt;p&gt;In the early days of the Internet, single-server machines were not that powerful, and the accompanying HTTPS, such as SSL v2, also had design flaws. At that time, there was an assumption that a single-server with an IP would only host one domain service. Therefore, after DNS resolution, it was very certain to directly connect to the IP and use the specific certificate for a particular domain. However, with the explosion of cloud computing, virtual hosting, and the scarcity of IP addresses in IPv4, it is inevitable that a server will host multiple domain scenes. This poses a problem for servers in not knowing which domain&amp;rsquo;s SSL certificate the client wants to access, which led to the emergence of HTTPS SNI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/2af263a13abf6545b697a0dabd01785d.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;SNI (Server Name Indication) is an extension of the TLS protocol, which allows the client to send the target hostname information to the server during the handshake process. This way, the server can host multiple domains&amp;rsquo; HTTPS services on the same IP address and provide the correct certificate for each domain.&lt;/p&gt;
&lt;p&gt;This problem seems simple, but in the early stages of the widespread adoption of HTTPS and the move of various Internet service providers to full-site HTTPS, many CDN vendors did not support SNI. Of course, today in 2024, both software ecosystems like Nginx and various vendors already support it.&lt;/p&gt;
&lt;p&gt;SNI information is transmitted through the TLS handshake protocol. The packet capture diagram is roughly as follows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/632f58a2b5911fc34ca5f6716b0e9992.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In practice, you can use the &lt;code&gt;-servername&lt;/code&gt; option in the &lt;code&gt;openssl s_client&lt;/code&gt; subcommand to specify SNI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl s_client -connect example.com:443 -servername example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you use the OpenSSL Library, you can also use functions like &lt;code&gt;SSL_set_tlsext_host_name&lt;/code&gt; and &lt;code&gt;BIO_set_conn_hostname&lt;/code&gt; to set SNI in the code.&lt;/p&gt;
&lt;h2 id=&#34;https-certificate-mechanism&#34;&gt;HTTPS Certificate Mechanism
&lt;/h2&gt;&lt;p&gt;HTTPS achieves a series of encryption, decryption, signing, verification, and other functions through the public key system&amp;rsquo;s asymmetric, symmetric, and hash algorithms, basically realizing the four security properties: confidentiality, integrity, authentication, and non-repudiation. It also provides solutions for typical man-in-the-middle attacks (MITM).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/689e0bbb76ecda3332862356747ea71d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;To solve the trust issue of public keys, the certificate and trust chain mechanism are introduced. A certificate is issued by a third-party Certificate Authority (CA). It is essentially a file, usually stored with extensions like .crt, .cer, or .pem. This file is encoded according to certain standards, such as X.509, and contains information such as the public key, certificate holder information, issuing authority information, validity period, and digital signature.&lt;/p&gt;
&lt;p&gt;There are some well-known CA organizations, such as DigiCert, VeriSign, Entrust, Let&amp;rsquo;s Encrypt, etc. The certificates they issue are divided into DV, OV, and EV, corresponding to different levels of trust. However, CA itself also has trust issues. The trust of small CAs relies on the signature and authentication of large CAs, but when it reaches the end of the chain, it can only use &amp;ldquo;self-signed certificates&amp;rdquo; or &amp;ldquo;root certificates&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/c901e34959e328f1b9b5be02155d7f1f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Most operating systems and browsers have built-in root certificates for major CAs, and during HTTPS communication, the certificate chain is verified layer by layer until the root certificate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/1fe05d3e7e1932f5754b71d4c7324a2d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;https-software-ecosystem&#34;&gt;HTTPS Software Ecosystem
&lt;/h2&gt;&lt;p&gt;Although the HTTPS or TLS ecosystem is rich, OpenSSL dominates the field. It supports almost all publicly available encryption algorithms and protocols and has become the de facto standard. Many applications use it as the underlying library to implement TLS functionality, such as the famous Apache, Nginx, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/0b6cfa177e827e1d5ff6659024b945c8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;å¾ç&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OpenSSL originated from SSLeay and has branched out into many branches, such as Google&amp;rsquo;s BoringSSL and OpenBSD&amp;rsquo;s LibreSSL. OpenSSL&amp;rsquo;s content is also extremely comprehensive, and learning can be prioritized using the &lt;code&gt;openssl&lt;/code&gt; command. For specific details, you can refer to ChatGPT.&lt;/p&gt;
&lt;h2 id=&#34;https-acceleration-solutions&#34;&gt;HTTPS Acceleration Solutions
&lt;/h2&gt;&lt;p&gt;HTTPS is great, but great things come at a cost. Therefore, various optimizations for full-site HTTPS deployment can basically be written as a separate article. Here are some brief points.&lt;/p&gt;
&lt;p&gt;First is optimizing RTT, which is particularly important in IO-intensive Internet scenarios. It mainly involves protocol upgrades, such as upgrading to HTTP/3 and TLS 1.3, which optimize RTT through different principles. Second is optimizing single-step performance, such as adding TLS acceleration cards, setting up dedicated TLS clusters or modules, and paying attention to terms like TLS session resumption.&lt;br&gt;
I have written an article before, sharing why HTTPS is so slow. If you are interested, you can read it here: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/gitconnected/why-does-https-need-7-handshakes-and-9-times-delay-e29d0a9d046a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why does HTTPS need 7 handshakes and 9 times delay?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.globalsign.com/en/blog/the-difference-between-http-and-https&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What&amp;rsquo;s the difference between HTTP and HTTPS?&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.bytebytego.com/i/53596514/how-does-https-work&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;how-does-https-work&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
