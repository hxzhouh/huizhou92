<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Arch on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/tags/arch/</link>
        <description>Recent content in Arch on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Wed, 25 Sep 2024 09:32:50 +0800</lastBuildDate><atom:link href="https://huizhou92.com/tags/arch/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Common Rate Limiting Algorithms: Analysis and Implementation</title>
        <link>https://huizhou92.com/p/common-rate-limiting-algorithms-analysis-and-implementation/</link>
        <pubDate>Wed, 25 Sep 2024 09:32:50 +0800</pubDate>
        
        <guid>https://huizhou92.com/p/common-rate-limiting-algorithms-analysis-and-implementation/</guid>
        <description>&lt;img src="https://images.hxzhouh.com/blog-images/2024/09/f146e1aedafc425732135df81c5cd244.png" alt="Featured image of post Common Rate Limiting Algorithms: Analysis and Implementation" /&gt;&lt;p&gt;Rate limiting is a critical mechanism in software architecture that controls resource usage and safeguards system security. By limiting the number of requests handled within a given time frame, rate limiting prevents system overloads, ensuring stability under high-load conditions. This article aims to analyze and implement several expected rate-limiting algorithms and discuss their pros and cons. Finally, we&amp;rsquo;ll explore rate-limiting designs in real-world business code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This article was first published in the Medium MPP plan. If you&amp;rsquo;re a Medium user, please follow me on &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;traffic-counter-mode&#34;&gt;Traffic Counter Mode
&lt;/h2&gt;&lt;p&gt;Assuming performance tests indicate that our system can handle a maximum load of 10 TPS, the most straightforward approach is to set a timer that allows ten requests per second and rejects any excess traffic.&lt;br&gt;
Code1: Windows Limit Example. You can run the code example &lt;a class=&#34;link&#34; href=&#34;https://go.dev/play/p/o9GpZGJ8N7i&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/hxzhouh/51020e18622c2e38ebf21cd6a9dc5cc6.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;However, this approach has a flaw. Suppose we receive 10 TPS requests within 2 seconds, between 0.9s and 1.1s. Even though the request rate does not exceed the threshold of 10 TPS in each period, the system still experiences 20 TPS within 1 second, exceeding the limit. The root cause of this issue lies in the discrete time-based counting, and to fix this, a &amp;ldquo;sliding window&amp;rdquo; rate limiting mode is designed to smooth the time-based calculations.&lt;/p&gt;
&lt;h2 id=&#34;sliding-window-mechanism&#34;&gt;Sliding Window Mechanism
&lt;/h2&gt;&lt;p&gt;The Sliding Window Algorithm is widely used in various fields of computer science, such as congestion control in TCP protocols. This algorithm divides time into smaller segments, each maintaining an independent counter. When a request arrives, it is assigned to the current time segment, and the corresponding counter is checked. If the counter has not reached its limit, the request is allowed, and the counter is incremented. Otherwise, the request is rejected. Older segments fade out of the window as time progresses while new segments are added.&lt;br&gt;
Code2: Sliding Window Example. You can try this code &lt;a class=&#34;link&#34; href=&#34;https://go.dev/play/p/kc-MacnzPTh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;br&gt;
&lt;script src=&#34;https://gist.github.com/hxzhouh/c5c79ea4b80ea5a026052471de07107f.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
Although the Sliding Window Algorithm provides more granular traffic control, it doesn’t fully resolve sudden traffic bursts. It also struggles to reshape traffic curves with finer granularity and does not achieve peak smoothing. Below are two additional rate-limiting algorithms designed for more stringent control.&lt;/p&gt;
&lt;h2 id=&#34;leaky-bucket-algorithm&#34;&gt;Leaky Bucket Algorithm
&lt;/h2&gt;&lt;p&gt;The Leaky Bucket Algorithm simulates a bucket with a fixed capacity and processes requests at a constant rate, regardless of the incoming traffic. This ensures that requests are handled evenly, smoothing out traffic and preventing spikes.&lt;br&gt;
Code3: Leaky Bucket Example. Run the code &lt;a class=&#34;link&#34; href=&#34;https://go.dev/play/p/dbIFj2vCqFU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/hxzhouh/ba78993644ce58958127f64fc0976c55.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The Leaky Bucket Algorithm is well-suited for scenarios requiring steady request processing, such as network traffic control and API rate limiting. The Leaky Bucket Algorithm effectively prevents system overload due to sudden traffic surges by controlling the rate at which tokens are added. The challenge lies in determining the bucket size and outflow rate. The system may still experience traffic surges if the bucket is too large. If it’s too tiny, legitimate requests could be unnecessarily rejected.&lt;/p&gt;
&lt;h2 id=&#34;token-bucket-algorithm&#34;&gt;Token Bucket Algorithm
&lt;/h2&gt;&lt;p&gt;The Token Bucket Algorithm is similar to real-world queueing systems, where tokens are issued at a fixed rate. For example, if we want to limit the system to a maximum of Y requests over X seconds, tokens are added to the bucket every X/Y seconds. Incoming requests must first acquire a token from the bucket to be processed. If no tokens are available, the request is rejected.&lt;/p&gt;
&lt;p&gt;Code 4: Token Bucket Example. You can try this code &lt;a class=&#34;link&#34; href=&#34;https://go.dev/play/p/-JAqGoz2xK-&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;br&gt;
&lt;script src=&#34;https://gist.github.com/hxzhouh/0c172824334aeea5ef101bd682fef59e.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;The Token Bucket Algorithm is ideal for handling burst traffic, such as network communications or API calls. It effectively balances traffic and prevents overload by controlling the token generation rate and the bucket&amp;rsquo;s capacity. Additionally, if system resources are sufficient, it allows for quickly handling more requests. The token generation speed is critical and must be carefully considered.&lt;/p&gt;
&lt;h2 id=&#34;rate-limiting-in-real-world-applications&#34;&gt;Rate Limiting in Real-world Applications
&lt;/h2&gt;&lt;h3 id=&#34;distributed-rate-limiting-algorithms&#34;&gt;Distributed Rate Limiting Algorithms
&lt;/h3&gt;&lt;p&gt;The four rate-limiting algorithms discussed above store their state in memory, which works for single-node systems. However, in microservice architectures, these algorithms are most effective at the gateway level for cluster-wide traffic control but not for fine-grained control within individual service nodes. We need to store the state in a shared cluster to enable rate-limiting coordination across multiple nodes. Below is an example of using Redis to implement a distributed token bucket algorithm. This is the method I often use in production.&lt;/p&gt;
&lt;p&gt;Code 5: Distributed Token Bucket Example using Redis&lt;br&gt;
&lt;script src=&#34;https://gist.github.com/hxzhouh/9aee69a3b24c38aa20274b726a596e2d.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h3 id=&#34;prioritization&#34;&gt;Prioritization
&lt;/h3&gt;&lt;p&gt;Server resources are valuable, and we want to allocate these resources to serve VIP clients during resource-constrained periods. A &amp;ldquo;quota&amp;rdquo; system based on distributed rate limiting offers a flexible solution. Unlike traditional token bucket algorithms, where access is binary (allow/deny), the quota system will enable users to consume resources as a &amp;ldquo;currency.&amp;rdquo; VIP users may be assigned higher quotas, while regular users face tighter limits. When a user&amp;rsquo;s quota is depleted, they must request more tokens to continue accessing services.&lt;/p&gt;
&lt;p&gt;Code 6: Quota System Example. You can try this code &lt;a class=&#34;link&#34; href=&#34;https://go.dev/play/p/MxKsxKRx9L_J&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;br&gt;
&lt;script src=&#34;https://gist.github.com/hxzhouh/dc06a2947f4d436bdce9743d65b6c9e6.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;This article has covered several expected rate-limiting algorithms, including traffic counters, sliding windows, leaky buckets, and token buckets, and analyzed their application scenarios. Traffic counters are simple but need help with sudden traffic spikes. The sliding window algorithm provides a smoother approach but is still limited. The leaky bucket algorithm ensures steady request handling, while the token bucket algorithm allows flexible handling of burst traffic.&lt;/p&gt;
&lt;p&gt;In real-world applications, especially in microservices, distributed rate limiting becomes essential. Using middleware like Redis, a distributed token bucket algorithm can effectively manage traffic across multiple nodes. Additionally, quota-based rate limiting offers greater flexibility and improves the experience for VIP customers. Rate limiting protects systems from overload and enhances overall stability and performance.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/p/common-rate-limiting-algorithms-analysis-and-implementation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Long Time Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you find my blog helpful, please subscribe to me via &lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/index.xml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or follow me on &lt;a class=&#34;link&#34; href=&#34;https://x.com/@piaopiaopig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt; account, follow me there. My articles will be published there as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
