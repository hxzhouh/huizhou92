<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>言论 on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/zh-cn/categories/talk/</link>
        <description>Recent content in 言论 on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Wed, 26 Mar 2025 19:17:56 +0800</lastBuildDate><atom:link href="https://huizhou92.com/zh-cn/categories/talk/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>软件工程师的身份危机 by  Annie Vella</title>
        <link>https://huizhou92.com/zh-cn/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BA%AB%E4%BB%BD%E5%8D%B1%E6%9C%BA-by-annie-vella/</link>
        <pubDate>Wed, 26 Mar 2025 19:17:56 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BA%AB%E4%BB%BD%E5%8D%B1%E6%9C%BA-by-annie-vella/</guid>
        <description>&lt;img src="https://images.hxzhouh.com/blog-images/2025/03/d87dba8dde3c2ca307a2dec04a038486.png" alt="Featured image of post 软件工程师的身份危机 by  Annie Vella" /&gt;&lt;p&gt;原文地址： &lt;a class=&#34;link&#34; href=&#34;https://annievella.com/posts/the-software-engineering-identity-crisis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://annievella.com/posts/the-software-engineering-identity-crisis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们很多人选择成为软件工程师，是因为我们在亲手&lt;em&gt;创造&lt;/em&gt;事物中找到了自我价值——而非仅仅管理或监督已有事物。&lt;/p&gt;
&lt;p&gt;但这种身份认同正面临挑战。&lt;/p&gt;
&lt;p&gt;人工智能（AI）编码助手不仅仅改变了我们编写软件的方式，它们还在从根本上动摇了我们对自我身份的认知。我们正在从创造者转变为编排者，从建造者转变为监督者。从工程师变成了看起来非常像……管理者的人。&lt;/p&gt;
&lt;p&gt;这种讽刺意味，直击痛点：多年来，我们一直认为软件工程超越了单纯的编码。需求、设计、测试、运维——这些都被认为是我们的专业技能的一部分。然而，行业却将我们推向了相反的方向。我们将这些职责交给了专业人士——产品负责人、架构师、质量工程师、平台工程师——而我们则加倍投入到我们的编码专业知识中。我们成为了代码大师，成为了现代魔法的骄傲使用者。&lt;/p&gt;
&lt;p&gt;现在，就在我们完善这项技能的同时，人工智能正威胁着要夺走它。&lt;/p&gt;
&lt;h2 id=&#34;我们即将失去的快乐&#34;&gt;我们即将失去的快乐
&lt;/h2&gt;&lt;p&gt;让我们坦诚地谈谈这里存在着什么风险。我们中的许多人不仅仅是编写代码——我们&lt;strong&gt;热爱&lt;/strong&gt;编写代码。我们的身份融入到我们精心设计的每一个优雅的解决方案中，融入到我们通过的每一个测试中，融入到我们通过纯粹的逻辑和创造力解决的每一个问题中。这不仅仅关乎职业或技艺，而是我们身份的真实写照。&lt;/p&gt;
&lt;p&gt;想想那些充满成就感的时刻：当你最终追踪到那个困扰生产环境的难以捉摸的bug时，当你计算出如何优化那个缓慢的算法并看到响应时间从几秒降到几毫秒时，当你把一个迷宫般的遗留代码改造成干净且可维护的东西时。这些不仅仅是成就——它们是我们作为工程师的表达。它们是提醒我们为什么选择这条道路的时刻。&lt;/p&gt;
&lt;p&gt;现在想象一下人工智能接管这些精雕细琢的时刻。这些工具的创造者描绘了一幅乐观的图景——他们说我们将花更多的时间在&lt;strong&gt;定义意图&lt;/strong&gt;、&lt;strong&gt;高层架构&lt;/strong&gt;和&lt;strong&gt;系统思考&lt;/strong&gt;上。但仔细听听他们真正想说的是什么：我们将成为监督者而不是创造者，管理者而不是建造者。&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2025/03/d902c8a0f8ab5ac9bb58e2077195feb7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;软件工程师正在进化为系统架构师？&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/posts/ashtom_how-ai-tools-are-reshaping-the-coding-workforce-activity-7303108929264275456-O5v2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;软件工程师正在转变为系统思考者和高层架构师吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种转变引发了关于我们作为建造者的身份的重要问题：监督是驱动我们的动力吗？是它让我们早上从床上跳起来，渴望解决下一个难题吗？&lt;/p&gt;
&lt;h2 id=&#34;身份转变它已经到来&#34;&gt;身份转变：它已经到来
&lt;/h2&gt;&lt;p&gt;我们现在讨论的并不是什么理论上的未来——而是我们正在经历的现实。当谷歌最近透露人工智能&lt;a class=&#34;link&#34; href=&#34;https://arstechnica.com/ai/2024/10/google-ceo-says-over-25-of-new-google-code-is-generated-by-ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;生成了他们超过四分之一的新代码&lt;/a&gt;时，这仅仅是个开始。Y Combinator 的首席执行官 Garry Tan 透露，对于他们大约四分之一的初创公司来说，&lt;a class=&#34;link&#34; href=&#34;https://www.cnbc.com/2025/03/15/y-combinator-startups-are-fastest-growing-in-fund-history-because-of-ai.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;95% 的代码现在是由人工智能编写的&lt;/a&gt;——标志着一个真正意义重大的转变。我自己的硕士研究也揭示了类似的景象：77% 的人花费在编写代码上的时间变少了，几乎一半的人认为我们的核心技能可能会退居二线，让位于提示工程（prompt engineering）。想想这种转变：从设计解决方案到设计提示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://annievella.com/images/prompt-engineering-replace-coding-skills.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;提示工程会取代传统的编码技能吗？&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;提示工程会取代传统的编码技能吗？&lt;/p&gt;
&lt;p&gt;当被问及如何培养提示工程技能时，软件工程师强调要提高沟通技巧。让 AI 按照你想要的方式行事，意味着能够清晰地表达事情——提供恰到好处的上下文，并清楚地描述任务。你与生成式人工智能（Gen AI）沟通得越好，输出结果就越有可能符合你的期望。有些人甚至建议对这些工具&lt;strong&gt;礼貌&lt;/strong&gt;一些，像对待团队成员一样对待它们——好像你在引导另一个人为你做某事。&lt;/p&gt;
&lt;p&gt;这些变化如此深刻，以至于我们正在创造新的术语来描述我们正在成为什么样的人。以 &lt;strong&gt;vibe coding&lt;/strong&gt;（氛围编码，一种依赖 AI 建议进行编码的方式）为例，这是 &lt;a class=&#34;link&#34; href=&#34;https://karpathy.ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Andrej Karpathy&lt;/a&gt; 最近在 &lt;a class=&#34;link&#34; href=&#34;https://x.com/karpathy/status/1886192184808149383&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;推特&lt;/a&gt; 上创造的一个词。它捕捉到了我们编写软件方式的深刻转变。&lt;/p&gt;
&lt;p&gt;在这种方式的一端是传统的方式——工匠的方式。我们有目的地编写每一行代码，每一个函数名和架构决策都反映了我们对系统的深刻理解。&lt;/p&gt;
&lt;p&gt;在另一端呢？我们让 AI填补空白，与它的建议“产生共鸣”。我们关注的是“是什么”，而不是“怎么做”。正如 Karpathy 所说：“完全沉浸在氛围中，拥抱指数增长，忘记代码的存在。”&lt;/p&gt;
&lt;p&gt;最后一部分让我们停顿了一下——如果我们忘记了所有关于代码的事情，我们还是工程师吗？&lt;/p&gt;
&lt;p&gt;在最近的一次&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=HtqxI53h7zM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;结对编程&lt;/a&gt;会议中，工程领域的思想领袖 &lt;a class=&#34;link&#34; href=&#34;https://itrevolution.com/author/gene-kim/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Gene Kim&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://steve-yegge.medium.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Steve Yegge&lt;/a&gt; 演示了这在实践中是什么样子的。他们使用 AI 编码助手，将一个 3500 行的遗留 Ruby 脚本移植到 Kotlin——这项任务通常需要一周的时间——仅用了一个小时。人工智能不仅仅翻译了代码，还改进了它，添加了他们多年来一直想要的模块化架构和单元测试，但却无法证明花费的时间是合理的。&lt;/p&gt;
&lt;p&gt;甚至连 DevOps 的教父 &lt;a class=&#34;link&#34; href=&#34;https://www.jedi.be/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Patrick Debois&lt;/a&gt; 也认为这种转变正在重塑我们的身份。在他&lt;a class=&#34;link&#34; href=&#34;https://ainativedev.io/news/the-4-patterns-of-ai-native-dev-overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最近对 AI 原生开发模式的分析&lt;/a&gt;中，他概述了我们工作方式的四个根本性转变：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://annievella.com/images/patrick-debois-four-AI-native-patterns.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Patrick Debois：AI 原生开发的 4种模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ainativedev.io/news/the-4-patterns-of-ai-native-dev-overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Patrick Debois：AI 原生开发的 4 种模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些模式揭示了一个深刻的转变：我们正在从 AI 系统的生产者转变为管理者，从详细的实现转变为表达意图，从交付转变为通过快速实验进行发现，以及从内容创建转变为知识管理。我们的角色正在演变为将创造与组织、构建与监督相结合。&lt;/p&gt;
&lt;p&gt;总的来说，我认为可以公平地说，我们职业身份的本质正在发生核心变化。&lt;/p&gt;
&lt;h2 id=&#34;塑造我们身份的技艺&#34;&gt;塑造我们身份的技艺
&lt;/h2&gt;&lt;p&gt;要理解这种身份危机，我们需要看看编码的技艺对我们产生了多么深刻的影响。从本质上讲，编写代码是关于掌握和控制——我们花费了多年时间来完善的技能。现代编程语言比过去使用的那些语言高级得多，但它们仍然需要深厚的技术理解。如今，很少有开发人员处理指针和内存管理的细节，但我们仍然以了解事物在底层是如何运作的而自豪。即使框架承担了更多繁重的工作，我们仍然保持着我们作为工匠的身份，我们对自己的工具了如指掌。&lt;/p&gt;
&lt;p&gt;今天的编程更多的是以创造性的方式将 API、框架和库拼接在一起，以构建有意义的东西。事实上，谷歌最近的一项研究表明，软件工程中的&lt;strong&gt;创造力&lt;/strong&gt;主要集中在&lt;a class=&#34;link&#34; href=&#34;https://ieeexplore.ieee.org/document/10445159&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;巧妙的重用而不是纯粹的创新&lt;/a&gt;这一概念上。这对我来说很有意义——我经常评论说，我们现在真的都只是“集成”工程师。&lt;/p&gt;
&lt;p&gt;尽管如此，我们仍然以了解构建某些东西所需的所有奇怪语法而感到自豪。这就像一种只有我们才能理解的秘密语言。精通一门编程语言使你能够灵活驾驭、精准操控它。它非常详细——仅仅一个错误的字符就会破坏整个程序，而且可能需要大量的时间和耐心才能让它按照你想要的方式运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先，必须完美地执行。在这方面，计算机也类似于传说中的魔法。如果一个字符，一个停顿，咒语的形式不严格正确，魔法就不会起作用。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;——弗雷德里克·P·布鲁克斯，《人月神话》，第一章，Addison-Wesley，1975&lt;/p&gt;
&lt;p&gt;其他 99% 的人认为我们理解代码是魔术，而且确实，可能需要多年的刻意练习才能掌握它。那些掌握不止一种编程语言的人有幸被称为“多面手”。我们中的许多人以编写干净、优雅的代码而感到自豪。我们热情地争论不同的风格和最佳实践，而且常常对此过于认真。&lt;/p&gt;
&lt;h2 id=&#34;一位不甘心的管理者自述&#34;&gt;一位不甘心的管理者自述
&lt;/h2&gt;&lt;p&gt;让我分享一个关于身份演变的故事，它可能会引起共鸣。&lt;/p&gt;
&lt;p&gt;在做了十年个人贡献者之后，我遇到了技术职业道路上臭名昭著的天花板。“高级首席软件工程师”——这就是技术职业道路的尽头。当时 Staff+ Engineering（资深工程师之上的职级）还不存在，而我所在公司的唯一架构师职位也已有人选。我面临着一个会改变我身份的选择：继续做一名建造者，还是成为一名监督者。&lt;/p&gt;
&lt;p&gt;我选择了管理。不情愿地。这就是这条路引导我的方向。我告诉自己这仍然是工程，只是在一个不同的层面上。管理系统与管理人员并没有什么不同。我仍然可以在其他任务之间继续编写代码。&lt;/p&gt;
&lt;p&gt;听起来很熟悉吗？这其中的相似之处令人惊叹。正如我不得不将直接解决问题的工作换成会议和文档工作一样，我们现在也被要求用提示工程来代替编码。那些定义我们作为工程师的技能——掌握语法、优雅地构建我们的代码、捕获和处理边缘情况、调试复杂问题——正在被降级到人工智能。相反，我们被告知要专注于听起来非常像管理的技能：清晰的沟通、系统思考、问题定义。&lt;/p&gt;
&lt;p&gt;但这里没有人谈论的是：身份危机。当你意识到你不再用自己的双手建造东西时的那种深深的失落感。当你的技术专长变得不如你“管理”工具的能力重要时。当你的技能变成监督时。&lt;/p&gt;
&lt;p&gt;组织人工智能能给我们带来同样的身份认同感吗？一种作为建造者、创造者、问题解决者的感觉？&lt;/p&gt;
&lt;h2 id=&#34;当机器挑战我们的身份时&#34;&gt;当机器挑战我们的身份时
&lt;/h2&gt;&lt;p&gt;现在，我们身份危机的根源变得清晰起来。我们花费多年时间完善的技能——那些给予我们目标、意义和自豪感的技能——现在正被机器以更快、更便宜和更大规模的方式完成。当然，质量不如你手写的代码（但目前而言）。但是现在编写代码的速度是惊人的，企业都在争先恐后地参与进来。&lt;/p&gt;
&lt;p&gt;这就是一线希望出现的地方。还记得那种讽刺吗——我们是如何将更广泛的技能方面交给专家的？人工智能正在推动我们重新获得我们曾经知道的东西：软件工程超越了单纯的编码。这个核心真理依然存在——最终，软件工程是关于解决问题、创造解决方案、构建重要的东西。&lt;/p&gt;
&lt;p&gt;这些更广泛的技能——Addy Osmani 在他关于&lt;a class=&#34;link&#34; href=&#34;https://addyo.substack.com/p/beyond-the-70-maximizing-the-human&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;人工智能辅助编码中人类 30% 的文章&lt;/a&gt;中称之为“持久的工程技能”——一直将伟大的工程师与优秀的工程师区分开来。沟通、大局观思考、处理歧义——这些在人工智能驱动的世界中变得更加重要。&lt;/p&gt;
&lt;p&gt;然而，这种对更广泛技能的强调在我们的社区中引发了争论。对于某些人来说，这听起来很像重新包装过的管理。而且他们并没有完全错——最近的一篇 &lt;a class=&#34;link&#34; href=&#34;https://www.cio.com/article/3509174/ai-coding-assistants-wave-goodbye-to-junior-developers.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CIO 文章&lt;/a&gt; 证实，开发团队已经在进行重组，以专注于监督而不是创造。这篇文章设想未来的团队由一个产品经理、一个用户体验设计师和一个主要使用人工智能生成原型的软件架构师组成。这些架构师或高级开发人员必须“理解内容……了解客户是谁以及我们试图实现什么”——这是被重新包装成技术工作的经典管理职责。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://annievella.com/images/addy-osmani-durable-engineering-skills.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;披着技术外衣的管理&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;披着技术外衣的管理&lt;/p&gt;
&lt;p&gt;这种演变引发了关于我们作为工程师的身份的根本性问题：随着传统职业阶梯的转变，下一代软件工程师将如何发展他们的技能？我们如何在拥抱这些新工具的同时，保留塑造我们职业的深厚技术理解和技能？也许最令人不安的是——随着人工智能能力的指数级进步，我们作为工匠的角色是否会像工业革命期间的手工织布工一样过时？&lt;/p&gt;
&lt;h2 id=&#34;前进的道路&#34;&gt;前进的道路
&lt;/h2&gt;&lt;p&gt;也许答案不在于抵制这种转变，而在于通过历史的视角来理解它。这些身份危机——这些通过我们的工作来定义我们自己的根本性转变——并不是什么新鲜事。它们是技术重塑一个职业时重复出现的一种模式的一部分。&lt;/p&gt;
&lt;p&gt;在&lt;a class=&#34;link&#34; href=&#34;https://www.britannica.com/story/the-rise-of-the-machines-pros-and-cons-of-the-industrial-revolution&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;工业革命&lt;/a&gt;期间，工匠们也面临着类似的危机。他们经过几代人磨练的传统技能正在被机器取代。但接下来发生的事情令人着迷：许多人适应了，成为了可以修理和改进这些威胁要取代他们的机器的专业人士。其他人则找到了应用他们对材料和工艺的深刻理解来改进整个工厂运营的方法。&lt;/p&gt;
&lt;p&gt;如果我们把这种类比应用到我们的人工智能时代，就会出现一条类似的道路。软件工程的核心——解决问题和创造价值——仍然没有改变。我们的工具正在发展，随之而来的是有效使用它们所需的技能。&lt;/p&gt;
&lt;p&gt;问题不在于我们是否会成为机器的管理者——而在于我们是否能在这种技能的演变中找到同样的满足感。&lt;/p&gt;
&lt;h2 id=&#34;工程师的困境&#34;&gt;工程师的困境
&lt;/h2&gt;&lt;p&gt;那么，这会把我们带到哪里？我们是否注定要成为人工智能智能体的监督者，而不是代码的编写者？这是一个应该抵制还是拥抱的未来？&lt;/p&gt;
&lt;p&gt;真相，一如既往，是细致入微的。正如一些工程师自然而然地倾向于管理，而另一些工程师则更喜欢保持亲力亲为一样，我们可能会看到在如何与人工智能互动方面出现类似的范围。有些人会擅长组织人工智能系统，专注于高层设计，并使这些系统更高效和可靠——指挥一场技术交响乐，而不是进行独奏。另一些人则会在人类专业知识仍然至关重要的领域找到自己的使命——可能是在安全敏感的应用程序、人工智能缺乏训练数据的新领域，或性能和可靠性至关重要的系统中。关键不是抵制这种演变，而是在其中找到自己的位置。&lt;/p&gt;
&lt;p&gt;显而易见的是，“软件工程师”的定义正在扩大，而不是缩小。使某人有价值的技能正在多样化。这既带来了挑战，也带来了机遇。&lt;/p&gt;
&lt;p&gt;对于那些热爱编码技能的人来说，这种转变可能会让人感到威胁。但请记住，人工智能工具仍然只是工具。它们不了解代码背后的“为什么”、业务背景或所服务的人类需求。它们无法真正意义上进行创新，至少目前还不能。而且据我们所知，它们无法&lt;strong&gt;感受到&lt;/strong&gt;解决复杂问题的满足感或创造新事物的乐趣。&lt;/p&gt;
&lt;p&gt;也许在这个新领域中最有价值的技能不是提示工程或系统架构，而是&lt;strong&gt;适应性&lt;/strong&gt;——愿意进化、学习新技能，并在一个快速变化的领域中找到自己独特的位置。&lt;/p&gt;
&lt;h2 id=&#34;光明的一面&#34;&gt;光明的一面
&lt;/h2&gt;&lt;p&gt;尽管存在这些挑战，但我们需要承认一些重要的事情：这些人工智能工具可以非常强大。借助像&lt;a class=&#34;link&#34; href=&#34;https://codeium.com/windsurf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windsurf&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://www.cursor.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cursor&lt;/a&gt; 这样将软件开发提升到一个全新水平的自主智能体集成开发环境（agentic IDE），就像拥有一个始终在你身边的支持性结对编程伙伴一样，随时准备帮助你解决以前可能看起来令人望而却步的问题。&lt;/p&gt;
&lt;p&gt;对于初级开发人员或我们这些可能感到有些生疏的人来说，人工智能助手可以增强信心——在你盯着一个空白文件时帮助你入门，在你犹豫不决时验证你的方法，或者以一种对你有意义的方式解释复杂的概念。对于经验丰富的开发人员来说，它们就像拥有一个不知疲倦的助手，可以处理日常任务，而你可以专注于问题的更具挑战性的方面。&lt;/p&gt;
&lt;p&gt;如今，我们能迅速搭建原型、探索各种方法，甚至在几分钟内掌握新技术——这速度着实令人震撼。可能需要数周的研究和反复试验才能完成的事情通常可以在几小时甚至几分钟内完成。这就像拥有超能力一样——能够放大我们的能力，并比以往更快地将我们的想法变成现实。&lt;/p&gt;
&lt;h2 id=&#34;现实检验&#34;&gt;现实检验
&lt;/h2&gt;&lt;p&gt;但是，能力越大，责任越大。最近一项全面的 &lt;a class=&#34;link&#34; href=&#34;https://arc.dev/talent-blog/impact-of-ai-on-code/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitClear 研究&lt;/a&gt; 分析了 2.11 亿行代码，揭示了一些令人担忧的趋势，因为人工智能代码生成工具变得越来越普遍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制粘贴的代码增加了 17.1%，这是人工智能辅助的代码重复首次超过重构（移动）的代码。&lt;/li&gt;
&lt;li&gt;重复代码块增加了 8 倍，现在有 6.66% 的提交包含重复的代码段。&lt;/li&gt;
&lt;li&gt;代码改动增加了 26%，所有代码更改中有 5.7% 在两周内被修改或删除。&lt;img src=&#34;https://annievella.com/images/gitclear-2025-trends-in-code-changes.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitClear：代码更改趋势&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://arc.dev/talent-blog/impact-of-ai-on-code/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitClear：代码更改趋势&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然我们生成代码的速度比以往任何时候都快，但我们也花费更多的时间来修复人工智能生成的错误并处理更难维护的代码。这不仅仅是速度问题——而是关于编写可持续、可维护软件的技能。&lt;/p&gt;
&lt;h2 id=&#34;隐藏的身份危机&#34;&gt;隐藏的身份危机
&lt;/h2&gt;&lt;p&gt;然而，在这些表面上的变化之下，隐藏着一个更深层次的挑战——一个触及我们作为工程师的核心的挑战。新兴的人机协作领域正在揭示关于我们未来的令人不安的真相。&lt;a class=&#34;link&#34; href=&#34;https://www.sciencedirect.com/science/article/pii/S2352250X24000502&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2024 年的一项研究&lt;/a&gt;表明，当人类和人工智能一起工作时，结果往往达不到预期。不是因为人工智能缺乏能力，而是因为信任在机器和人类之间的运作方式不同。&lt;/p&gt;
&lt;p&gt;我们与人工智能建立信任的方式与我们与人类团队成员建立信任的方式不同。&lt;/p&gt;
&lt;p&gt;对于人类来说，信任是通过共同的成功逐渐建立起来的。一起解决的每一个问题都会加强这种联系。即使是处理得当的失败也能加深信任。对于人工智能来说，信任通常开始时很高，但会迅速瓦解。&lt;/p&gt;
&lt;p&gt;每一个不正确的回答、每一个幻觉般的错误修复、每一次放错地方的信心都会削弱我们对机器的信任。与人类关系中信任通常会随着时间的推移而增长不同，人工智能的信任通常会在早期达到顶峰并下降。&lt;/p&gt;
&lt;p&gt;当信任消失时，生产力也会下降。&lt;/p&gt;
&lt;p&gt;该研究揭示了原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人工智能在解释我们的意图方面存在固有的不可预测性&lt;/li&gt;
&lt;li&gt;它缺乏使人类协作流畅的上下文意识&lt;/li&gt;
&lt;li&gt;它的决策通常缺乏透明度，因此一旦失去信任就很难重建&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些挑战反映了我们许多人在转变为技术领导者时所经历的事情。正如新的工程经理必须学会信任他们团队的工作而无需自己动手一样，我们现在也面临着与人工智能类似的转变——学会指导和验证，而不是自己编写每一行代码。&lt;/p&gt;
&lt;p&gt;现实是严峻的：尽管人工智能具有原始能力，但团队在有人工智能的情况下通常比没有人工智能的情况下表现更差。正如团队的生产力在无效的领导下会受到影响一样，当我们不了解如何使用我们的人工智能工具时，我们的效率也会降低。&lt;/p&gt;
&lt;h2 id=&#34;重塑你的身份&#34;&gt;重塑你的身份
&lt;/h2&gt;&lt;p&gt;从我作为一名不情愿的经理的历程以及我对这种人工智能转型的研究中，我看到了三种我们可以保留我们作为建造者身份的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抵制&lt;/strong&gt;——有些人会选择专注于人类创造力和深厚技术专业知识仍然至关重要的领域&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适应&lt;/strong&gt;——另一些人会拥抱人工智能编排，成为一种新型技术交响乐的指挥家3. &lt;strong&gt;平衡&lt;/strong&gt;——还有许多人，像我一样，会寻求一条中间道路——使用人工智能来完成日常任务，同时保留直接解决问题的乐趣&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后我意识到一个改变我观点的事实：&lt;em&gt;我们不必只选择一条道路&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&#34;身份的钟摆&#34;&gt;身份的钟摆
&lt;/h2&gt;&lt;p&gt;也许我们身份危机的答案在于&lt;a class=&#34;link&#34; href=&#34;https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;工程师/经理的钟摆&lt;/a&gt;。我自己在这些角色之间转换的经历教会了我一些关于身份的关键知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理并没有取代我的工程师身份——它扩展了它&lt;/li&gt;
&lt;li&gt;回归亲力亲为的工作并不是倒退——而是身份的更新&lt;/li&gt;
&lt;li&gt;钟摆的摆动本身成为了我的一部分——适应性强、不断成长、不断进化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就在那时，我突然意识到：&lt;em&gt;这正是我们需要的人工智能时代的模型&lt;/em&gt;。如果我们不必被迫成为永久的“人工智能经理”，而是可以在以下角色之间切换，那会怎么样呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深入的技术工作，我们可以直接编写和完善代码&lt;/li&gt;
&lt;li&gt;战略编排，我们可以指导人工智能系统&lt;/li&gt;
&lt;li&gt;将这两种方法结合起来的创造性问题解决&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种平衡的方法与我从其他工程师那里听到的声音产生了深刻的共鸣。我的研究表明了一个明确的信息：保持强大的工程基础比以往任何时候都更加重要。我们需要深厚的技术知识才能有效地审查、验证和调整人工智能生成的代码——因为它通常不太正确。当被问及他们对人工智能编码助手的担忧时，软件工程师将代码质量和安全性排在工作保障之上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://annievella.com/images/ai-concerns.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;对人工智能编码助手的主要担忧&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;软件工程师对人工智能编码助手的主要担忧&lt;/p&gt;
&lt;p&gt;这告诉我一些深刻的事情：我们把自己视为工程卓越的守护者，确保人工智能生成的解决方案遵循可靠的软件工程原则。我们并不是想把我们的专业知识委托给人工智能——我们正在进化以新的方式应用我们的技能。&lt;/p&gt;
&lt;h2 id=&#34;你的行动&#34;&gt;你的行动
&lt;/h2&gt;&lt;p&gt;当我们驾驭这种转型时，一个基本的真理浮出水面：我们的身份危机实际上根本不是关于人工智能的。对人机协作的研究、与管理转型的相似之处、角色的钟摆——它们都指向更深层次的东西。除了在建造者或监督者之间做出选择之外，还存在着我们作为创造者的核心。&lt;/p&gt;
&lt;p&gt;现在我们又回到了原点：人工智能并没有抢走我们的工作，而是给了我们一个机会来重新获得我们交给专家的那些更广泛的角色方面。回到软件工程不仅仅意味着编写代码的时代。当它意味着理解整个问题空间时，从用户需求到业务影响，从系统设计到卓越运营。&lt;/p&gt;
&lt;p&gt;钟摆的比喻在这里为我们提供了智慧。正如我们中的许多人在工程和管理角色之间摇摆一样，我们可以以类似的方式拥抱人工智能的流动性。有些时候，我们会深入研究代码，体验设计优雅解决方案的快感。其他时候，我们会退一步来指导人工智能系统——不是作为监督者，而是作为了解他们技能的每一个部分的大师级建造者。就像工业革命的工人成为优化改变他们技能的机器的专家一样，我们可以掌握这些人工智能系统——使它们成为我们创造力的工具，而不是我们创造力的替代品。&lt;/p&gt;
&lt;p&gt;在人工智能时代，最重要的是保留我们本质的东西：构建事物、解决难题、使某些东西完全正确运行的纯粹乐趣。我们的工程卓越不仅仅是验证人工智能的工作——它源于对系统如此熟悉，以至于我们可以塑造它们、改进它们、改变它们。&lt;/p&gt;
&lt;p&gt;选择不是人工智能是否会改变我们的行业——它已经在改变了。真正的选择是我们如何与它一起进化。我们是会坚持对成为一名工程师的过时观念吗？还是会重新获得我们的技能，不是作为单纯的编码员，而是作为人工智能增强型系统的大师级建造者？&lt;/p&gt;
&lt;p&gt;钟摆正在摆动——你会坚守阵地，还是随之而动？&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/zh-cn/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BA%AB%E4%BB%BD%E5%8D%B1%E6%9C%BA-by-annie-vella/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;本文长期链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果您觉得我的博客对你有帮助，请通过 &lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/index.xml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RSS&lt;/a&gt;订阅我。&lt;/li&gt;
&lt;li&gt;或者在&lt;a class=&#34;link&#34; href=&#34;https://x.com/@piaopiaopig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X&lt;/a&gt;上关注我。&lt;/li&gt;
&lt;li&gt;如果您有&lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt;账号，能给我个关注嘛？我的文章第一时间都会发布在Medium。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>IT 巨头正在杀死他们的客户</title>
        <link>https://huizhou92.com/zh-cn/p/it-%E5%B7%A8%E5%A4%B4%E6%AD%A3%E5%9C%A8%E6%9D%80%E6%AD%BB%E4%BB%96%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7/</link>
        <pubDate>Thu, 09 Jan 2025 16:01:05 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/it-%E5%B7%A8%E5%A4%B4%E6%AD%A3%E5%9C%A8%E6%9D%80%E6%AD%BB%E4%BB%96%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7/</guid>
        <description>&lt;img src="https://images.hxzhouh.com/blog-images/2025/01/589319fe1c17cafde315ff3dab8b3f24.webp" alt="Featured image of post IT 巨头正在杀死他们的客户" /&gt;&lt;p&gt;近期，&lt;a class=&#34;link&#34; href=&#34;https://pod.geraspora.de/people/4ce5b01a9e3a1b18d700000a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dennis Schubert&lt;/a&gt;发布了一则帖子，称 “diaspora*” 项目的网络基础设施因为访问流量过大而陷入了性能瓶颈。令人震惊的是，他发现&lt;strong&gt;70% 的请求来自 IT 巨头公司的 LLM（大语言模型）爬虫&lt;/strong&gt;。这些爬虫无视 &lt;code&gt;robots.txt&lt;/code&gt; 文件，贪婪地抓取网站的所有可用数据，甚至是一些无关紧要的内容。&lt;/p&gt;
&lt;!-- more--&gt;
&lt;p&gt;&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2025/01/3cbeeac63070c2d3d19c34cc21828f43.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Dennis 感到无比愤怒，因为 &lt;code&gt;ChatGPT&lt;/code&gt; 和 &lt;code&gt;Amazon&lt;/code&gt; 的爬虫竟然爬取了 Wiki 的&lt;strong&gt;全部编辑历史&lt;/strong&gt;，每一页的每次编辑都被记录下来。他质问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“他们到底要做什么？是想研究文本如何随时间变化吗？”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这种对数据的无底线掠夺，导致服务器负载极高，用户访问体验显著下降。Dennis 尝试了一些反制措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;更新 robots.txt&lt;/strong&gt;：无效，爬虫无视规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限制访问速率&lt;/strong&gt;：失败，爬虫会快速更换 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;屏蔽 User Agent&lt;/strong&gt;：没用，爬虫伪装成普通用户。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终 Dennis 感慨，这种行为已经接近于对整个互联网的&lt;strong&gt;DDoS 攻击&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;为什么-it-巨头需要爬我们的数据&#34;&gt;为什么 IT 巨头需要爬我们的数据？
&lt;/h2&gt;&lt;p&gt;答案是：&lt;strong&gt;AI 数据饥荒&lt;/strong&gt;。&lt;br&gt;
随着大模型的普及，用于训练 AI 的高质量语料已经见底。正如 OpenAI 工程师 James Betker 所言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“模型优劣的关键在于数据集的质量。它们正在以惊人的精度复刻数据集。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;为了在 AI 竞赛中领先，巨头们不惜一切代价获取更多数据。个人网站、自建 Wiki，这些原本属于小众的内容，正成为巨头们争相攫取的目标。&lt;/p&gt;
&lt;h2 id=&#34;我们能够应对吗&#34;&gt;我们能够应对吗？
&lt;/h2&gt;&lt;p&gt;IT 巨头拥有顶尖的爬虫和反爬虫技术团队，能够在抓取与用户体验之间找到平衡。但对于个人网站和小型项目来说，这无疑是一场不对等的战争。&lt;/p&gt;
&lt;p&gt;Dennis 提出了以下两种反制策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tarpit 技术&lt;/strong&gt;：生成无意义的随机文本，诱导爬虫抓取无关内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 陷阱&lt;/strong&gt;：让 AI 爬虫加载 JavaScript 才能获得数据，而这些脚本可能暗含挖矿代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管这些方法可能有效，但实现起来成本不菲。&lt;/p&gt;
&lt;h2 id=&#34;没有链接的互联网&#34;&gt;没有链接的互联网
&lt;/h2&gt;&lt;p&gt;巨头公司的终极目标是什么？&lt;br&gt;
是将用户牢牢锁定在他们的生态系统中。通过 AI 提供“最优内容”，用户无需访问其他网站，甚至看不到其他链接。一切内容直接呈现，广告作为附加品，而创作者只能沦为巨头的数据供应商。&lt;/p&gt;
&lt;p&gt;这种趋势正在瓦解互联网的开放性。&lt;br&gt;
无论你如何优化 SEO 或产出优质内容，巨头的 AI 会优先抓取并整合，用户永远不会直接访问你的网站。最终，个人创作者将失去流量与收入，整个互联网变成巨头的“金矿”。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;IT 巨头正在用技术手段，掠夺数据，榨取价值，逐步摧毁互联网的多样性与开放性。对于个人网站而言，我们几乎无力抗争，而这场改变已经不可逆。&lt;/p&gt;
&lt;h2 id=&#34;引用资源&#34;&gt;引用资源：
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://pod.geraspora.de/posts/17342163&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dennis Schubert 的帖子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://nonint.com/2023/06/10/the-it-in-ai-models-is-the-dataset/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The IT in AI Models is the Dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.techspot.com/article/2908-the-zero-click-internet/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TechSpot：The Zero-Click Internet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/zh-cn/p/it-%E5%B7%A8%E5%A4%B4%E6%AD%A3%E5%9C%A8%E6%9D%80%E6%AD%BB%E4%BB%96%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;本文长期连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果您觉得我的博客对你有帮助，请通过 &lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/index.xml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RSS&lt;/a&gt;订阅我。&lt;/li&gt;
&lt;li&gt;或者在&lt;a class=&#34;link&#34; href=&#34;https://x.com/@piaopiaopig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X&lt;/a&gt;上关注我。&lt;/li&gt;
&lt;li&gt;如果您有&lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt;账号，能给我个关注嘛？我的文章第一时间都会发布在Medium。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>知识管理的几个误区</title>
        <link>https://huizhou92.com/zh-cn/p/crafting-your-second-brain-lessons-learned-from-my-note-taking-journey/</link>
        <pubDate>Mon, 06 May 2024 10:19:00 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/crafting-your-second-brain-lessons-learned-from-my-note-taking-journey/</guid>
        <description>&lt;img src="https://images.yixiao9206.cn/blog-images/2024/05/5ab6b54893dc2241704444526269572a.jpg" alt="Featured image of post 知识管理的几个误区" /&gt;&lt;p&gt;我最近几年一直再打造自己的第二大脑，下面是我的几个经验教训。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;频繁切换笔记软件博客系统&#34;&gt;频繁切换笔记软件/博客系统
&lt;/h2&gt;&lt;p&gt;我先后使用过 EverNote，WizNote，VNote，CSDN blog，Google blogspot, WordPress，最终只造成博客散落在多个互联网角落。解决办法就是 all in one 。我现在选择的是Obsidian&lt;/p&gt;
&lt;h2 id=&#34;频繁切换笔记格式&#34;&gt;频繁切换笔记格式
&lt;/h2&gt;&lt;p&gt;我先后使用过 txt, orgmode, markdown，富文本等多种格式，最终只造成各种格式转换烦恼，跟第一条一样，每个笔记系统的格式可能不通用，选择Obsidian的原因就是它的markdown语法。如果我需要，我可以轻易的将它迁移到任何笔记系统，&lt;/p&gt;
&lt;h2 id=&#34;闪念笔记和真正有用的笔记混杂&#34;&gt;闪念笔记和真正有用的笔记混杂
&lt;/h2&gt;&lt;p&gt;闪念笔记用于快速捕捉一瞬间的灵感，但只有你在一两天内回顾它并把它变成有用的合适的笔记才有意义。如果不及时回顾，好的想法将淹没在大量的突发奇想中。我们每天大多数的想法没有太大意义应该被丢弃，而那些可以成为重大有意义的想法我们必须将他们识别出来。&lt;/p&gt;
&lt;h2 id=&#34;项目笔记和知识笔记混杂&#34;&gt;项目笔记和知识笔记混杂
&lt;/h2&gt;&lt;p&gt;只记录特定项目相关的笔记，将导致项目期间有趣的观点或者想法信息丢失。正确的做法是在项目中提取通用的知识。我推荐使用P.A.R.A 方法来整理笔记，有关P.A.R.A 您可以参考 这个&lt;a class=&#34;link&#34; href=&#34;https://fortelabs.com/blog/para/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;网页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;频繁整理笔记的洁癖&#34;&gt;频繁整理笔记的「洁癖」
&lt;/h2&gt;&lt;p&gt;大量堆积的笔记将造成知识整理冲动，多来几次就会影响坚持记录的信心。解决方法是，确定自己关注的领域和负责的责任范围，并不完全采用自下而上的知识管理方法。在达到心理挤压点时，使用 MOCS（Maps of Content）的方法整理笔记（双链绝对是你值得尝试的。）。知识管理系统最重要的是在同一个地方，用同样的格式和一致的标准记录你的洞见。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
