<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>言论 on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/zh-cn/categories/talk/</link>
        <description>Recent content in 言论 on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Thu, 15 Aug 2024 18:56:30 +0800</lastBuildDate><atom:link href="https://huizhou92.com/zh-cn/categories/talk/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Mac: tmux 最佳实践</title>
        <link>https://huizhou92.com/zh-cn/p/mac-tmux-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Thu, 15 Aug 2024 18:56:30 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/mac-tmux-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;img src="https://images.hxzhouh.com/blog-images/2024/08/d46c392343d2c463c4744cc2259b42a7.png" alt="Featured image of post Mac: tmux 最佳实践" /&gt;&lt;blockquote&gt;
&lt;p&gt;tmux 是一个终端多路复用器：它允许从单个屏幕创建、访问和控制多个终端。 tmux 可能会与屏幕分离并继续在后台运行，然后重新连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次看到&lt;code&gt;tmux&lt;/code&gt; 的介绍的时候，我其实没什么感觉,觉得没什么.后面用terminal多了，遇到了一些问题，尝试解决，然后我重新认真学习&lt;code&gt;tmux&lt;/code&gt;。它改变了我电脑的习惯。&lt;br&gt;
本文将会花十分钟介绍，tmux 的基本使用场景&lt;/p&gt;
&lt;h2 id=&#34;什么是-terminal-session&#34;&gt;什么是 terminal session
&lt;/h2&gt;&lt;p&gt;回忆一下，你日常工作时候使用terminal 的场景，打开一个 &lt;code&gt;Iterm2&lt;/code&gt;  窗口，然后使用ssh 连接一台远程机器，然后进入特定目录，开始工作，完成工作后，关闭&lt;code&gt;Iterm2&lt;/code&gt; 窗口。上面这些步骤，就是一个 terminal session 它的生命周期是跟  terminal 的生命周期绑定在一起的，关闭窗口后session就结束，然后下次我们要工作的时候，就重复上面的步骤。&lt;br&gt;
有什么办法，可以将session跟terminal 开来，下次再操作的时候，就不需要重复上面的步骤？ tmux可以帮助我们实现这个功能。&lt;/p&gt;
&lt;!-- more--&gt;
&lt;blockquote&gt;
&lt;p&gt;This article was first published in the Medium MPP plan. If you are a Medium user, please follow me on &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;ins class=&#34;adsbygoogle&#34;
   style=&#34;display:block&#34;
   data-ad-client=&#34;ca-pub-9000447749076746&#34;
   data-ad-slot=&#34;5063552270&#34;
   data-ad-format=&#34;auto&#34;
   data-full-width-responsive=&#34;true&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
   (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;我们看看再 tmux 下如何实现上面这个功能把。&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/08/0f9d1eb1580f31c8fc1e195f32f20f08.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ITerm2&#34;
	
	
&gt;&lt;br&gt;
在这个演示中，我首先用&lt;code&gt;tmux new -s test &lt;/code&gt; 创建了一个tmux session ，然后登录我的一台开发机器，然后再将session 剥离，回到Iterm2 终端，最后我又使用 &lt;code&gt;tmux attach-session&lt;/code&gt; 回到原来的开发机器，跟刚才退出去的时候一模一样。 这就是 tmux 基础的应用了，剥离session，并且保持session 状态。&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR
&lt;/h2&gt;&lt;p&gt;tmux  可以帮助我们实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。&lt;/li&gt;
&lt;li&gt;它可以让新窗口&amp;quot;接入&amp;quot;已经存在的会话。&lt;/li&gt;
&lt;li&gt;它允许每个会话有多个连接窗口，因此可以多人实时共享会话。&lt;/li&gt;
&lt;li&gt;它还支持窗口任意的垂直和水平拆分。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tmux-基本用法&#34;&gt;tmux 基本用法
&lt;/h2&gt;&lt;h3 id=&#34;安装-tmux&#34;&gt;安装 tmux
&lt;/h3&gt;&lt;p&gt;在Mac上，可以使用brew 来安装 tmux&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install  tmux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其他环境请参考:&lt;a class=&#34;link&#34; href=&#34;https://github.com/tmux/tmux/wiki/Installing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Installing tmux&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动tmux--与退出-tmux&#34;&gt;启动tmux  与退出 tmux
&lt;/h3&gt;&lt;p&gt;安装完成后， 在 terminal中输入 &lt;code&gt;tmux&lt;/code&gt; 就可以启动一个  tmux session 。输入exit 就会退出 tmux session ，返回到原来的 terminal 页面。&lt;br&gt;
&lt;img src=&#34;https://images.hxzhouh.com/blog-images/2024/08/b1e9646b21500848496831da3f724e75.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ITerm2 2&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;前缀键&#34;&gt;前缀键
&lt;/h3&gt;&lt;p&gt;跟其他软件不一样的是: tmux 中所有的快捷键都需要和前缀快捷键 &lt;code&gt;⌃b&lt;/code&gt; 来组合使用（注：&lt;code&gt;⌃&lt;/code&gt; 为 Mac 的 control 键),这样其实挺好的，减少了与其他软件冲突的概率。可以通过&lt;code&gt; ⌃b+?&lt;/code&gt; 来查询所有的快捷键。一般把tmux 的快捷键分成三类:窗口管理、窗格管理、以及session 管理。&lt;/p&gt;
&lt;h2 id=&#34;session-管理&#34;&gt;session 管理
&lt;/h2&gt;&lt;p&gt;如果运行了多次 &lt;code&gt;tmux&lt;/code&gt; 命令则会开启多个 tmux 会话（session）。在 tmux 会话中，使用前缀快捷键 &lt;code&gt;⌃b&lt;/code&gt; 配合以下快捷键可操作会话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌃b + $&lt;/code&gt; 重命名当前会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + s&lt;/code&gt; 选择会话列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + d&lt;/code&gt; detach 当前会话，运行后将会退出 tmux 进程，返回至 terminal 主页面。&lt;br&gt;
在 terminal 中，可以这样操作 session&lt;/li&gt;
&lt;li&gt;tmux new -s foo # 新建名称为 foo 的会话&lt;/li&gt;
&lt;li&gt;tmux ls # 列出所有 tmux 会话&lt;/li&gt;
&lt;li&gt;tmux a # 恢复至上一次的会话&lt;/li&gt;
&lt;li&gt;tmux a -t foo # 恢复名称为 foo 的会话，会话默认名称为数字&lt;/li&gt;
&lt;li&gt;tmux kill-session -t foo # 删除名称为 foo 的会话&lt;/li&gt;
&lt;li&gt;tmux kill-server # 删除所有的会话&lt;br&gt;
配合 alias 会得到更好的体验，比如我自己的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tnew&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tmux new -s&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 新建一个会话&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tmux ls&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tmux detach&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 分离 会话，会保存分离之前的状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ta&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tmux attach -t&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 连接会话&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tkss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tmux kill-session -t&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;窗格管理&#34;&gt;窗格管理
&lt;/h2&gt;&lt;p&gt;Tmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌃b + %&lt;/code&gt; 左右平分出两个窗格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + &amp;quot;&lt;/code&gt; 上下平分出两个窗格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + x&lt;/code&gt; 关闭当前窗格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + {&lt;/code&gt; 当前窗格前移&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + }&lt;/code&gt; 当前窗格后移&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + ;&lt;/code&gt; 选择上次使用的窗格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + o&lt;/code&gt; 选择下一个窗格，也可以使用上下左右方向键来选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + space&lt;/code&gt; 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 &lt;code&gt;⌥1&lt;/code&gt; 至 &lt;code&gt;⌥5&lt;/code&gt;来切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + z&lt;/code&gt; 最大化当前窗格，再次执行可恢复原来大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + q&lt;/code&gt; 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;窗口管理&#34;&gt;窗口管理
&lt;/h2&gt;&lt;p&gt;tmux 还有窗口（window） 的概念，当窗格变得拥挤的时候，我们可以再开一个窗口，下面是窗口一些常用的快捷键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌃b + c&lt;/code&gt; 新建窗口，此时当前窗口会切换至新窗口，不影响原有窗口的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + p&lt;/code&gt; 切换至上一窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + n&lt;/code&gt; 切换至下一窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + w&lt;/code&gt; 窗口列表选择，注意 macOS 下使用 &lt;code&gt;⌃p&lt;/code&gt; 和 &lt;code&gt;⌃n&lt;/code&gt; 进行上下选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + &amp;amp;&lt;/code&gt; 关闭当前窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + ,&lt;/code&gt; 重命名窗口，可以使用中文，重命名后能在 tmux 状态栏更快速的识别窗口 id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + 0&lt;/code&gt; 切换至 0 号窗口，使用其他数字 id 切换至对应窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃b + f&lt;/code&gt; 根据窗口名搜索选择窗口，可模糊匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;这篇文章只是总结了一下tmux 的基本使用以及快捷键，还有很多应用场景没有涉及。比如跟vim 配合如何更加高效的在 vim中写代码。希望看过这篇文章的朋友，能够上手体验一下&lt;code&gt;tmux&lt;/code&gt;， 使用tmux 生产力。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>知识管理的几个误区</title>
        <link>https://huizhou92.com/zh-cn/p/crafting-your-second-brain-lessons-learned-from-my-note-taking-journey/</link>
        <pubDate>Mon, 06 May 2024 10:19:00 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/crafting-your-second-brain-lessons-learned-from-my-note-taking-journey/</guid>
        <description>&lt;img src="https://images.yixiao9206.cn/blog-images/2024/05/5ab6b54893dc2241704444526269572a.jpg" alt="Featured image of post 知识管理的几个误区" /&gt;&lt;p&gt;我最近几年一直再打造自己的第二大脑，下面是我的几个经验教训。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;频繁切换笔记软件博客系统&#34;&gt;频繁切换笔记软件/博客系统
&lt;/h2&gt;&lt;p&gt;我先后使用过 EverNote，WizNote，VNote，CSDN blog，Google blogspot, WordPress，最终只造成博客散落在多个互联网角落。解决办法就是 all in one 。我现在选择的是Obsidian&lt;/p&gt;
&lt;h2 id=&#34;频繁切换笔记格式&#34;&gt;频繁切换笔记格式
&lt;/h2&gt;&lt;p&gt;我先后使用过 txt, orgmode, markdown，富文本等多种格式，最终只造成各种格式转换烦恼，跟第一条一样，每个笔记系统的格式可能不通用，选择Obsidian的原因就是它的markdown语法。如果我需要，我可以轻易的将它迁移到任何笔记系统，&lt;/p&gt;
&lt;h2 id=&#34;闪念笔记和真正有用的笔记混杂&#34;&gt;闪念笔记和真正有用的笔记混杂
&lt;/h2&gt;&lt;p&gt;闪念笔记用于快速捕捉一瞬间的灵感，但只有你在一两天内回顾它并把它变成有用的合适的笔记才有意义。如果不及时回顾，好的想法将淹没在大量的突发奇想中。我们每天大多数的想法没有太大意义应该被丢弃，而那些可以成为重大有意义的想法我们必须将他们识别出来。&lt;/p&gt;
&lt;h2 id=&#34;项目笔记和知识笔记混杂&#34;&gt;项目笔记和知识笔记混杂
&lt;/h2&gt;&lt;p&gt;只记录特定项目相关的笔记，将导致项目期间有趣的观点或者想法信息丢失。正确的做法是在项目中提取通用的知识。我推荐使用P.A.R.A 方法来整理笔记，有关P.A.R.A 您可以参考 这个&lt;a class=&#34;link&#34; href=&#34;https://fortelabs.com/blog/para/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;网页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;频繁整理笔记的洁癖&#34;&gt;频繁整理笔记的「洁癖」
&lt;/h2&gt;&lt;p&gt;大量堆积的笔记将造成知识整理冲动，多来几次就会影响坚持记录的信心。解决方法是，确定自己关注的领域和负责的责任范围，并不完全采用自下而上的知识管理方法。在达到心理挤压点时，使用 MOCS（Maps of Content）的方法整理笔记（双链绝对是你值得尝试的。）。知识管理系统最重要的是在同一个地方，用同样的格式和一致的标准记录你的洞见。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
