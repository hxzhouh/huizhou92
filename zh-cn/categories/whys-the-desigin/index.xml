<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>为什么这么设计 on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/zh-cn/categories/whys-the-desigin/</link>
        <description>Recent content in 为什么这么设计 on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Thu, 23 May 2024 10:25:02 +0800</lastBuildDate><atom:link href="https://huizhou92.com/zh-cn/categories/whys-the-desigin/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>为什么 Google 选择使用HTTP 2 实现 gRPC</title>
        <link>https://huizhou92.com/zh-cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88-google-%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8http-2-%E5%AE%9E%E7%8E%B0-grpc/</link>
        <pubDate>Thu, 23 May 2024 10:25:02 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88-google-%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8http-2-%E5%AE%9E%E7%8E%B0-grpc/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1427104227401-94b390b378b0?ixid=M3wzNjAwOTd8MHwxfHNlYXJjaHw4NHx8aHR0cHxlbnwwfDB8fHwxNzM1MTk0Mzc2fDA&amp;amp;ixlib=rb-4.0.3&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;woman with blue nails reading ipad&#34;
	
	
&gt;&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
      &lt;a href=&#34;https://unsplash.com/photos/woman-holding-white-ipad-CPWhnIkL4Lk&#34;&gt;Backlink&lt;/a&gt; | |Photo by &lt;a href=&#34;https://unsplash.com/@annademy?utm_source=Obsidian%20Image%20Inserter%20Plugin&amp;utm_medium=referral&#34;&gt;Anna Demianenko&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=Obsidian%20Image%20Inserter%20Plugin&amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;
      &lt;/div&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gRPC&lt;/a&gt;是google开源的高性能跨语言的RPC方案。gRPC的设计目标是在任何环境下运行，支持可插拔的负载均衡，跟踪，运行状况检查和身份验证。它不仅支持数据中心内部和跨数据中心的服务调用，它也适用于分布式计算的最后一公里，将设备，移动应用程序和浏览器连接到后端服务。&lt;br&gt;
关于 GRPC设计的动机和原则 我们可以从这篇文章里面找到答案，&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/blog/principles&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gRPC Motivation and Design Principles&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;官方的文章令人印象深刻的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部有Stubby的框架，但是它不是基于任何一个标准的&lt;/li&gt;
&lt;li&gt;支持任意环境使用，支持物联网、手机、浏览器&lt;/li&gt;
&lt;li&gt;支持stream和流控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上：性能不是gRPC 设计的第一目标。那么为什么选择HTTP/2?&lt;/p&gt;
&lt;h2 id=&#34;http2是什么&#34;&gt;HTTP/2是什么
&lt;/h2&gt;&lt;p&gt;在正式讨论gRPC为什么选择HTTP/2之前，我们先来简单了解下HTTP/2。&lt;br&gt;
HTTP/2可以简单用一个图片来介绍：&lt;br&gt;
&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/ae09920e853bee0b21be83f8e770ba01.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hpbn.co/&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;来自：&lt;a class=&#34;link&#34; href=&#34;https://hpbn.co/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hpbn.co/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/1 里的header对应HTTP/2里的 HEADERS frame&lt;/li&gt;
&lt;li&gt;HTTP/1 里的payload对应HTTP/2里的 DATA frame&lt;br&gt;
在Chrome浏览器里，打开&lt;code&gt;chrome://net-internals/#http2&lt;/code&gt;，可以看到http2链接的信息。&lt;br&gt;
&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/01dd6bce8fde7de2b3a8f9ee06158978.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;chrome-http2&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前很多网站都已经跑在HTTP/2上了。&lt;/p&gt;
&lt;h2 id=&#34;grpc-over-http2&#34;&gt;gRPC Over HTTP/2
&lt;/h2&gt;&lt;p&gt;准确来说gRPC设计上是分层的，底层支持不同的协议，目前gRPC支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gRPC over HTTP2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gRPC Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是大多数情况下，讨论都是基于gRPC over HTTP2。&lt;br&gt;
下面从一个真实的gRPC &lt;code&gt;SayHello&lt;/code&gt;请求，查看它在HTTP/2上是怎样实现的。用Wireshark抓包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.yixiao9206.cn/blog-images/2024/05/40be952445bf4ec323071035fcf9da88.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;wireshark-grpc&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到下面这些Header：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Header: :authority: localhost:50051
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Header: :path: /helloworld.Greeter/SayHello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Header: :method: POST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Header: :scheme: http
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Header: content-type: application/grpc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Header: user-agent: grpc-java-netty/1.11.0  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后请求的参数在DATA frame里：&lt;br&gt;
&lt;code&gt;GRPC Message: /helloworld.Greeter/SayHello, Request&lt;/code&gt;&lt;br&gt;
简而言之，gGRPC把元数据放到HTTP/2 Headers里，请求参数序列化之后放到 DATA frame里。&lt;/p&gt;
&lt;h2 id=&#34;基于http2-协议的优点&#34;&gt;基于HTTP/2 协议的优点
&lt;/h2&gt;&lt;h3 id=&#34;http2-是一个公开的标准&#34;&gt;HTTP/2 是一个公开的标准
&lt;/h3&gt;&lt;p&gt;Google本身把这个事情想清楚了，它并没有把内部的Stubby开源，而是选择重新做。现在技术越来越开放，私有协议的空间越来越小。&lt;/p&gt;
&lt;h3 id=&#34;http2-是一个经过实践检验的标准&#34;&gt;HTTP/2 是一个经过实践检验的标准
&lt;/h3&gt;&lt;p&gt;HTTP/2是先有实践再有标准，这个很重要。很多不成功的标准都是先有一大堆厂商讨论出标准后有实现，导致混乱而不可用，比如CORBA。HTTP/2的前身是Google的&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/SPDY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SPDY&lt;/a&gt;，没有Google的实践和推动，可能都不会有HTTP/2。&lt;/p&gt;
&lt;h3 id=&#34;http2-天然支持物联网手机浏览器&#34;&gt;HTTP/2 天然支持物联网、手机、浏览器
&lt;/h3&gt;&lt;p&gt;实际上先用上HTTP/2的也是手机和手机浏览器。移动互联网推动了HTTP/2的发展和普及。&lt;/p&gt;
&lt;h3 id=&#34;基于http2-多语言的实现容易&#34;&gt;基于HTTP/2 多语言的实现容易
&lt;/h3&gt;&lt;p&gt;只讨论协议本身的实现，不考虑序列化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个流行的编程语言都会有成熟的HTTP/2 Client&lt;/li&gt;
&lt;li&gt;HTTP/2 Client是经过充分测试，可靠的&lt;/li&gt;
&lt;li&gt;用Client发送HTTP/2请求的难度远低于用socket发送数据包/解析数据包&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http2支持stream和流控&#34;&gt;HTTP/2支持Stream和流控
&lt;/h3&gt;&lt;p&gt;在业界，有很多支持stream的方案，比如基于websocket的，或者&lt;a class=&#34;link&#34; href=&#34;https://github.com/rsocket/rsocket&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rsocket&lt;/a&gt;。但是这些方案都不是通用的。&lt;br&gt;
HTTP/2里的Stream还可以设置优先级，尽管在rpc里可能用的比较少，但是一些复杂的场景可能会用到。&lt;/p&gt;
&lt;h3 id=&#34;基于http2-在gatewayproxy很容易支持&#34;&gt;基于HTTP/2 在Gateway/Proxy很容易支持
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nginx.com/blog/nginx-1-13-10-grpc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;nginx对gRPC的支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch%5c_overview/grpc#&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;envoy对gRPC的支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http2-安全性有保证&#34;&gt;HTTP/2 安全性有保证
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP/2 天然支持SSL，当然gRPC可以跑在clear text协议（即不加密）上。&lt;/li&gt;
&lt;li&gt;很多私有协议的rpc可能自己包装了一层TLS支持，使用起来也非常复杂。开发者是否有足够的安全知识？使用者是否配置对了？运维者是否能正确理解？&lt;/li&gt;
&lt;li&gt;HTTP/2 在公有网络上的传输上有保证。比如这个&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/CRIME&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRIME攻击&lt;/a&gt;，私有协议很难保证没有这样子的漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http2-鉴权成熟&#34;&gt;HTTP/2 鉴权成熟
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从HTTP/1发展起来的鉴权系统已经很成熟了，可以无缝用在HTTP/2上&lt;/li&gt;
&lt;li&gt;可以从前端到后端完全打通的鉴权，不需要做任何转换适配&lt;br&gt;
比如传统的rpc dubbo，需要写一个dubbo filter，还要考虑把鉴权相关的信息通过thread local传递进去。rpc协议本身也需要支持。总之，非常复杂。实际上绝大部分公司里的rpc都是没有鉴权的，可以随便调。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于http2-的缺点&#34;&gt;基于HTTP/2 的缺点
&lt;/h2&gt;&lt;h3 id=&#34;rpc的元数据的传输不够高效&#34;&gt;Rpc的元数据的传输不够高效
&lt;/h3&gt;&lt;p&gt;尽管HPAC可以压缩HTTP Header，但是对于rpc来说，确定一个函数调用，可以简化为一个int，只要两端去协商过一次，后面直接查表就可以了，不需要像HPAC那样编码解码。&lt;br&gt;
可以考虑专门对gRPC做一个优化过的HTTP/2解析器，减少一些通用的处理，感觉可以提升性能。&lt;/p&gt;
&lt;h3 id=&#34;http2-里一次grpc调用需要解码两次&#34;&gt;HTTP/2 里一次gRPC调用需要解码两次
&lt;/h3&gt;&lt;p&gt;一次是HEADERS frame，一次是DATA frame。&lt;br&gt;
HTTP/2 标准本身是只有一个TCP连接，但是实际在gRPC里是会有多个TCP连接，使用时需要注意。&lt;br&gt;
gRPC选择基于HTTP/2，那么它的性能肯定不会是最顶尖的。&lt;strong&gt;但是对于rpc来说中庸的qps可以接受&lt;/strong&gt;，通用和兼容性才是最重要的事情。我们可以参考一下官方的benchmark：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/docs/guides/benchmarking.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grpc.io/docs/guides/benchmarking.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/hank-whu/rpc-benchmark&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/hank-whu/rpc-benchmark&lt;/a&gt;&lt;br&gt;
如果您的场景是搞&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;google制定标准的能力&#34;&gt;Google制定标准的能力
&lt;/h2&gt;&lt;p&gt;近10年来，Google制定标准的能力越来越强。下面列举一些标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/2&lt;/li&gt;
&lt;li&gt;WebP图片格式&lt;/li&gt;
&lt;li&gt;WebRTC 网页即时通信&lt;/li&gt;
&lt;li&gt;VP9/AV1 视频编码标准&lt;/li&gt;
&lt;li&gt;Service Worker/PWA&lt;/li&gt;
&lt;li&gt;QUIC/ HTTP/3&lt;br&gt;
当然google也并不都会成功，很多事情它想推也失败了，比如Chrome的Native Client。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;gRPC目前是k8s生态里的事实标准。 gRPC是否会成为更多地方，更大领域的RPC标准？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么会出现grpc&#34;&gt;为什么会出现gRPC
&lt;/h2&gt;&lt;p&gt;准确来说为什么会出现基于HTTP/2的RPC？&lt;br&gt;
个人认为一个重要的原因是，在Cloud Native的潮流下，开放互通的需求必然会产生基于HTTP/2的RPC。即使没有gRPC，也会有其它基于HTTP/2的RPC。&lt;/p&gt;
&lt;p&gt;gRPC在Google的内部也是先用在Google Cloud Platform和公开的API上：&lt;a class=&#34;link&#34; href=&#34;https://opensource.google.com/projects/grpc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://opensource.google.com/projects/grpc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;尽管gRPC它可能替换不了内部的RPC实现，但是在开放互通的时代，不止在k8s上，gRPC会有越来越多的舞台可以施展。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grpc.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hpbn.co/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hpbn.co/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://grpc.io/blog/loadbalancing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grpc.io/blog/loadbalancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://http2.github.io/faq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://http2.github.io/faq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grpc/grpc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grpc/grpc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/zh-cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88-google-%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8http-2-%E5%AE%9E%E7%8E%B0-grpc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;本文长期链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果您觉得我的博客对你有帮助，请通过 &lt;a class=&#34;link&#34; href=&#34;https://huizhou92.com/index.xml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RSS&lt;/a&gt;订阅我。&lt;/li&gt;
&lt;li&gt;或者在&lt;a class=&#34;link&#34; href=&#34;https://x.com/@piaopiaopig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X&lt;/a&gt;上关注我。&lt;/li&gt;
&lt;li&gt;如果您有&lt;a class=&#34;link&#34; href=&#34;https://medium.huizhou92.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium&lt;/a&gt;账号，能给我个关注嘛？我的文章第一时间都会发布在Medium。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
