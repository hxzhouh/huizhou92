<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>编程语言 on huizhou92&#39;s Blog</title>
        <link>https://huizhou92.com/zh-cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
        <description>Recent content in 编程语言 on huizhou92&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Copyright © 2023 huizhou92</copyright>
        <lastBuildDate>Wed, 04 Dec 2024 19:20:16 +0800</lastBuildDate><atom:link href="https://huizhou92.com/zh-cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>那个编程语言才是最快的？</title>
        <link>https://huizhou92.com/zh-cn/p/%E9%82%A3%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%89%8D%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84/</link>
        <pubDate>Wed, 04 Dec 2024 19:20:16 +0800</pubDate>
        
        <guid>https://huizhou92.com/zh-cn/p/%E9%82%A3%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%89%8D%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84/</guid>
        <description>&lt;p&gt;Ben Dicken (&lt;a class=&#34;link&#34; href=&#34;https:://x.com/@BenjDicken&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@BenjDicken&lt;/a&gt;) 做了一项&lt;a class=&#34;link&#34; href=&#34;https://github.com/bddicken/languages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;测试&lt;/a&gt;，执行双层循环， 1 万 * 10 万= 10 亿次循环，看看哪种编程语言快。为此还制作了一个动图来直观展示。&lt;/p&gt;
&lt;!-- more--&gt;
&lt;p&gt;![[iWkHAGyRUf1bKIW6.gif]]&lt;/p&gt;
&lt;p&gt;一般来说，这种项目，最精彩的是issue。&lt;br&gt;
热心的开发者贡献了各种语言的版本，比如&lt;code&gt;Zig&lt;/code&gt;、&lt;code&gt;Julia&lt;/code&gt;、&lt;code&gt;Perl&lt;/code&gt;、&lt;code&gt;Elixir&lt;/code&gt;、&lt;code&gt;Fortan&lt;/code&gt;、&lt;code&gt;C#&lt;/code&gt;、&lt;code&gt;Lua&lt;/code&gt;等&lt;br&gt;
同时，还在讨论应该怎样优化代码&lt;br&gt;
比如 @&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/dolanor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dolanor&lt;/a&gt;&lt;/strong&gt;   提了一个PR &lt;a class=&#34;link&#34; href=&#34;https://github.com/bddicken/languages/pull/86&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;# optimize go loops with goroutine&lt;/a&gt; 认为Golang的长处是在并发编程，单线程下它的效率肯定比不上&lt;code&gt;C&lt;/code&gt;、&lt;code&gt;Rust&lt;/code&gt;，应该用goroutine来优化。&lt;/p&gt;
&lt;p&gt;@&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Brandon-T&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Brandon-T&lt;/a&gt;&lt;/strong&gt;  在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/bddicken/languages/issues/71&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;# Benchmark Issues&lt;/a&gt; 讨论了现有基准测试存在的问题及改进方向，核心观点为测试不应包含程序启动、打印等无关时间，应聚焦代码执行本身。&lt;/p&gt;
&lt;p&gt;不知不觉我几乎把整个issue全部看完了。&lt;/p&gt;
&lt;p&gt;这个项目让我想到了年初的&lt;a class=&#34;link&#34; href=&#34;https://www.morling.dev/blog/one-billion-row-challenge/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;1BRC&lt;/a&gt;。在枯燥的编码生活中，这是一个很好的消遣。同时能够学习一些性能优化的技巧，参与到与世界各地的人的讨论中来。&lt;br&gt;
我希望这样的活动能够多一点。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
